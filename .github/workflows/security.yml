name: üõ°Ô∏è Security & Code Quality

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run security scans daily at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  NODE_VERSION: '20.x'
  CES_VERSION: '2.7.0'

jobs:
  # ===================================================================
  # JOB 1: DEPENDENCY SECURITY AUDIT
  # ===================================================================
  audit:
    name: üîç Dependency Security Audit
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4

      - name: üì¶ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: üì• Install dependencies
        run: npm ci --prefer-offline

      - name: üîç Run npm audit
        run: |
          echo "üîç Running npm security audit..."
          npm audit --audit-level=moderate --json > npm-audit-report.json || true
          
          # Check if there are high/critical vulnerabilities
          CRITICAL=$(cat npm-audit-report.json | jq '.metadata.vulnerabilities.critical // 0')
          HIGH=$(cat npm-audit-report.json | jq '.metadata.vulnerabilities.high // 0')
          
          echo "Critical vulnerabilities: $CRITICAL"
          echo "High vulnerabilities: $HIGH"
          
          if [[ $CRITICAL -gt 0 || $HIGH -gt 0 ]]; then
            echo "‚ö†Ô∏è High or critical vulnerabilities found!"
            cat npm-audit-report.json | jq '.advisories'
            exit 1
          else
            echo "‚úÖ No high or critical vulnerabilities found"
          fi

      - name: ü§ñ Anthropic SDK Security Audit
        run: |
          echo "ü§ñ Running Anthropic SDK specific security audit..."
          # Specific audit for Anthropic SDK
          npm audit @anthropic-ai/sdk --json > anthropic-audit.json || true
          
          ANTHROPIC_CRITICAL=$(cat anthropic-audit.json | jq '.metadata.vulnerabilities.critical // 0')
          ANTHROPIC_HIGH=$(cat anthropic-audit.json | jq '.metadata.vulnerabilities.high // 0')
          
          echo "ü§ñ Anthropic SDK - Critical: $ANTHROPIC_CRITICAL, High: $ANTHROPIC_HIGH"
          
          if [[ $ANTHROPIC_CRITICAL -gt 0 || $ANTHROPIC_HIGH -gt 0 ]]; then
            echo "‚ö†Ô∏è Anthropic SDK vulnerabilities found!"
            cat anthropic-audit.json | jq '.advisories'
            exit 1
          else
            echo "‚úÖ Anthropic SDK security clean"
          fi

      - name: üîç API Key Security Check
        run: |
          echo "üîç Checking for hardcoded API keys..."
          # Check for potential API key exposure
          if grep -r "sk-ant-" src/ 2>/dev/null; then
            echo "‚ùå Potential Anthropic API key found in source code"
            exit 1
          fi
          
          if grep -r "ANTHROPIC_API_KEY.*=" src/ 2>/dev/null | grep -v "process.env"; then
            echo "‚ùå Potential API key hardcoding found"
            exit 1
          fi
          
          echo "‚úÖ No hardcoded API keys detected"

      - name: üìä Upload audit report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: npm-audit-report
          path: |
            npm-audit-report.json
            anthropic-audit.json
          retention-days: 30

  # ===================================================================
  # JOB 2: CODEQL SECURITY ANALYSIS
  # ===================================================================
  codeql:
    name: üî¨ CodeQL Analysis
    runs-on: ubuntu-latest
    timeout-minutes: 30
    permissions:
      actions: read
      contents: read
      security-events: write

    strategy:
      fail-fast: false
      matrix:
        language: [ 'javascript' ]

    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4

      - name: üî¨ Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: ${{ matrix.language }}
          queries: security-extended,security-and-quality

      - name: üèóÔ∏è Autobuild
        uses: github/codeql-action/autobuild@v3

      - name: üî¨ Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          category: "/language:${{matrix.language}}"

  # ===================================================================
  # JOB 3: CONTAINER SECURITY SCAN
  # ===================================================================
  container-scan:
    name: üê≥ Container Security Scan
    runs-on: ubuntu-latest
    timeout-minutes: 20
    if: github.event_name == 'push' || github.event_name == 'schedule'

    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4

      - name: üèóÔ∏è Build Docker image
        run: |
          docker build -t ces-security-scan:latest --build-arg CES_VERSION=${{ env.CES_VERSION }} .

      - name: üõ°Ô∏è Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'ces-security-scan:latest'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: üìä Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  # ===================================================================
  # JOB 4: SECRET SCANNING
  # ===================================================================
  secret-scan:
    name: üîê Secret Scanning
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: üîê Run secret detection
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: ${{ github.event.repository.default_branch }}
          head: HEAD
          extra_args: --debug --only-verified

  # ===================================================================
  # JOB 5: LICENSE COMPLIANCE CHECK
  # ===================================================================
  license-check:
    name: üìÑ License Compliance
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4

      - name: üì¶ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: üì• Install dependencies
        run: npm ci --prefer-offline

      - name: üìÑ Check licenses
        run: |
          npx license-checker --summary --production --json > license-report.json
          
          # Check for forbidden licenses
          FORBIDDEN_LICENSES=("GPL-2.0" "GPL-3.0" "AGPL-1.0" "AGPL-3.0")
          
          for license in "${FORBIDDEN_LICENSES[@]}"; do
            if cat license-report.json | jq -r '.[].licenses' | grep -q "$license"; then
              echo "‚ö†Ô∏è Forbidden license found: $license"
              exit 1
            fi
          done
          
          echo "‚úÖ All licenses are compliant"

      - name: üìä Upload license report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: license-report
          path: license-report.json
          retention-days: 30

  # ===================================================================
  # JOB 6: CODE QUALITY METRICS
  # ===================================================================
  quality-metrics:
    name: üìä Code Quality Metrics
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: üì¶ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: üì• Install dependencies
        run: npm ci --prefer-offline

      - name: üß™ Run tests with coverage
        run: npm test -- --coverage --watchAll=false --ci

      - name: üìä SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        with:
          args: >
            -Dsonar.projectKey=claude-ecosystem-standard
            -Dsonar.organization=anthropic
            -Dsonar.sources=src/
            -Dsonar.tests=src/__tests__/
            -Dsonar.javascript.lcov.reportPaths=coverage/lcov.info
            -Dsonar.coverage.exclusions=**/*.test.ts,**/*.spec.ts

  # ===================================================================
  # JOB 7: SECURITY SUMMARY
  # ===================================================================
  security-summary:
    name: üìã Security Summary
    runs-on: ubuntu-latest
    needs: [audit, codeql, container-scan, secret-scan, license-check, quality-metrics]
    if: always()

    steps:
      - name: üìã Security scan summary
        run: |
          echo "## üõ°Ô∏è Security Scan Results" >> $GITHUB_STEP_SUMMARY
          echo "| Check | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Dependency Audit | ${{ needs.audit.result == 'success' && '‚úÖ Pass' || '‚ùå Fail' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| CodeQL Analysis | ${{ needs.codeql.result == 'success' && '‚úÖ Pass' || '‚ùå Fail' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Container Scan | ${{ needs.container-scan.result == 'success' && '‚úÖ Pass' || needs.container-scan.result == 'skipped' && '‚è≠Ô∏è Skipped' || '‚ùå Fail' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Secret Scan | ${{ needs.secret-scan.result == 'success' && '‚úÖ Pass' || '‚ùå Fail' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| License Check | ${{ needs.license-check.result == 'success' && '‚úÖ Pass' || '‚ùå Fail' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Quality Metrics | ${{ needs.quality-metrics.result == 'success' && '‚úÖ Pass' || '‚ùå Fail' }} |" >> $GITHUB_STEP_SUMMARY

      - name: ‚úÖ Check overall security status
        run: |
          if [[ "${{ needs.audit.result }}" != "success" ]] || \
             [[ "${{ needs.codeql.result }}" != "success" ]] || \
             [[ "${{ needs.secret-scan.result }}" != "success" ]] || \
             [[ "${{ needs.license-check.result }}" != "success" ]]; then
            echo "‚ùå Security checks failed"
            exit 1
          else
            echo "‚úÖ All security checks passed"
          fi