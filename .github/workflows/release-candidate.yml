name: 🧪 Release Candidate

on:
  push:
    branches: [develop, release/*]
  pull_request:
    branches: [main]
    types: [opened, synchronize, ready_for_review]
  workflow_dispatch:
    inputs:
      rc-version:
        description: 'Release candidate version'
        required: false
        default: 'auto'
      target-branch:
        description: 'Target branch for RC'
        required: false
        default: 'develop'
        type: choice
        options:
          - develop
          - release/candidate
          - feature/rc-test

env:
  NODE_VERSION: '20.x'

jobs:
  rc-analysis:
    name: 🔍 RC Analysis
    runs-on: ubuntu-latest
    outputs:
      rc-version: ${{ steps.version.outputs.rc-version }}
      base-version: ${{ steps.version.outputs.base-version }}
      should-create-rc: ${{ steps.analysis.outputs.should-create }}
      changes-summary: ${{ steps.changes.outputs.summary }}
    
    steps:
      - name: 🛒 Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🔍 Analyze Version
        id: version
        run: |
          # Get current version
          CURRENT_VERSION=$(node -p "require('./package.json').version")
          echo "📦 Current version: $CURRENT_VERSION"
          
          # Generate RC version
          if [ "${{ github.event.inputs.rc-version }}" = "auto" ] || [ -z "${{ github.event.inputs.rc-version }}" ]; then
            # Auto-generate RC version
            TIMESTAMP=$(date +%Y%m%d%H%M)
            SHORT_SHA=${GITHUB_SHA:0:8}
            
            # Increment patch version for RC
            IFS='.' read -r major minor patch <<< "$CURRENT_VERSION"
            NEXT_PATCH=$((patch + 1))
            RC_VERSION="$major.$minor.$NEXT_PATCH-rc.$TIMESTAMP.$SHORT_SHA"
          else
            RC_VERSION="${{ github.event.inputs.rc-version }}"
          fi
          
          echo "rc-version=$RC_VERSION" >> $GITHUB_OUTPUT
          echo "base-version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
          echo "🧪 RC Version: $RC_VERSION"

      - name: 📊 Analyze Changes
        id: changes
        run: |
          echo "📊 Analyzing changes for RC..."
          
          # Get the base branch for comparison
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            BASE_REF="${{ github.base_ref }}"
            HEAD_REF="${{ github.head_ref }}"
          else
            BASE_REF="main"
            HEAD_REF="${{ github.ref_name }}"
          fi
          
          echo "🔍 Comparing $BASE_REF..$HEAD_REF"
          
          # Count changes by category
          FEAT_COUNT=$(git log --oneline origin/$BASE_REF..HEAD | grep -cE "^[a-f0-9]+ (feat|feature):" || echo "0")
          FIX_COUNT=$(git log --oneline origin/$BASE_REF..HEAD | grep -cE "^[a-f0-9]+ (fix|bug):" || echo "0")
          DOCS_COUNT=$(git log --oneline origin/$BASE_REF..HEAD | grep -cE "^[a-f0-9]+ docs?:" || echo "0")
          REFACTOR_COUNT=$(git log --oneline origin/$BASE_REF..HEAD | grep -cE "^[a-f0-9]+ (refactor|improve):" || echo "0")
          ANTHROPIC_COUNT=$(git log --oneline origin/$BASE_REF..HEAD | grep -ciE "(anthropic|claude|ai)" || echo "0")
          
          TOTAL_COMMITS=$(git log --oneline origin/$BASE_REF..HEAD | wc -l)
          
          # Generate summary
          SUMMARY="Features: $FEAT_COUNT, Fixes: $FIX_COUNT, Docs: $DOCS_COUNT, Refactor: $REFACTOR_COUNT, AI: $ANTHROPIC_COUNT, Total: $TOTAL_COMMITS"
          echo "summary=$SUMMARY" >> $GITHUB_OUTPUT
          
          echo "📋 Changes: $SUMMARY"

      - name: 🎯 Should Create RC
        id: analysis
        run: |
          TOTAL_COMMITS=$(git log --oneline origin/main..HEAD | wc -l 2>/dev/null || echo "1")
          
          # Determine if RC should be created
          SHOULD_CREATE="true"
          
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            if [ "${{ github.event.pull_request.draft }}" = "true" ]; then
              SHOULD_CREATE="false"
              echo "🚧 Draft PR - skipping RC creation"
            fi
          fi
          
          if [ $TOTAL_COMMITS -eq 0 ]; then
            SHOULD_CREATE="false"
            echo "📭 No new commits - skipping RC creation"
          fi
          
          echo "should-create=$SHOULD_CREATE" >> $GITHUB_OUTPUT
          echo "🎯 Should create RC: $SHOULD_CREATE"

  rc-quality-gate:
    name: 🛡️ RC Quality Gate
    runs-on: ubuntu-latest
    needs: rc-analysis
    if: needs.rc-analysis.outputs.should-create-rc == 'true'
    
    steps:
      - name: 🛒 Checkout Repository
        uses: actions/checkout@v4

      - name: ✅ CES Validation
        uses: ./.github/actions/ces-validate
        with:
          validation-level: 'full'
          anthropic-check: 'true'
          fail-on-warnings: 'false'

      - name: 🧪 Quick Test Suite
        uses: ./.github/workflows/reusable-test.yml
        with:
          node-version: ${{ env.NODE_VERSION }}
          test-type: 'unit'
          anthropic-tests: false
          cache-key-suffix: 'rc'
        secrets:
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: 🔐 Security Quick Scan
        uses: ./.github/actions/anthropic-security
        with:
          check-type: 'keys'
          severity: 'high'
          fail-on-secrets: 'true'

  rc-build:
    name: 🏗️ RC Build
    runs-on: ubuntu-latest
    needs: [rc-analysis, rc-quality-gate]
    if: needs.rc-analysis.outputs.should-create-rc == 'true'
    
    steps:
      - name: 🛒 Checkout Repository
        uses: actions/checkout@v4

      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install Dependencies
        run: |
          npm ci --prefer-offline --no-audit
          echo "✅ Dependencies installed"

      - name: 📝 Update RC Version
        run: |
          RC_VERSION="${{ needs.rc-analysis.outputs.rc-version }}"
          echo "📝 Setting version to $RC_VERSION"
          
          # Update package.json without creating git tag
          npm version $RC_VERSION --no-git-tag-version
          
          # Update CLAUDE.md for RC
          if [ -f "CLAUDE.md" ]; then
            sed -i "s/CES v[0-9]\+\.[0-9]\+\.[0-9]\+/CES v$RC_VERSION/g" CLAUDE.md
            echo "✅ Updated CLAUDE.md with RC version"
          fi

      - name: 🏗️ Build RC Package
        run: |
          npm run build
          echo "✅ RC build completed"

      - name: 📦 Create RC Package
        run: |
          RC_VERSION="${{ needs.rc-analysis.outputs.rc-version }}"
          
          # Create RC distribution
          mkdir -p rc-package
          
          # Copy built files
          cp -r dist/ rc-package/
          cp package.json rc-package/
          cp CLAUDE.md rc-package/
          cp README.md rc-package/
          
          # Create RC metadata
          cat > rc-package/RC-INFO.md << EOF
          # 🧪 Release Candidate v$RC_VERSION
          
          ## RC Information
          - **RC Version:** $RC_VERSION
          - **Base Version:** ${{ needs.rc-analysis.outputs.base-version }}
          - **Branch:** ${{ github.ref_name }}
          - **Commit:** ${{ github.sha }}
          - **Created:** $(date -u +%Y-%m-%dT%H:%M:%S.%3NZ)
          - **Actor:** ${{ github.actor }}
          
          ## Changes Summary
          ${{ needs.rc-analysis.outputs.changes-summary }}
          
          ## Testing Status
          - ✅ CES Validation: Passed
          - ✅ Unit Tests: Passed
          - ✅ Security Scan: Passed
          - ⏳ Integration Tests: Pending
          - ⏳ E2E Tests: Pending
          
          ## Installation
          \`\`\`bash
          npm install claude-ecosystem-standard@$RC_VERSION
          \`\`\`
          
          ## Notes
          - This is a pre-release version for testing
          - Not recommended for production use
          - Feedback welcome via GitHub issues
          EOF
          
          # Create tarball
          tar -czf "ces-rc-$RC_VERSION.tar.gz" -C rc-package .
          
          echo "✅ RC package created"

      - name: 📤 Upload RC Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: release-candidate-${{ needs.rc-analysis.outputs.rc-version }}
          path: |
            ces-rc-*.tar.gz
            rc-package/
          retention-days: 7

  rc-integration-tests:
    name: 🔗 RC Integration Tests
    runs-on: ubuntu-latest
    needs: [rc-analysis, rc-build]
    if: needs.rc-analysis.outputs.should-create-rc == 'true'
    
    steps:
      - name: 🛒 Checkout Repository
        uses: actions/checkout@v4

      - name: 📥 Download RC Package
        uses: actions/download-artifact@v4
        with:
          name: release-candidate-${{ needs.rc-analysis.outputs.rc-version }}

      - name: 🧪 Integration Test Suite
        uses: ./.github/workflows/reusable-test.yml
        with:
          node-version: ${{ env.NODE_VERSION }}
          test-type: 'integration'
          anthropic-tests: true
          cache-key-suffix: 'rc-integration'
        secrets:
          ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}

  rc-e2e-tests:
    name: 🎭 RC E2E Tests
    runs-on: ubuntu-latest
    needs: [rc-analysis, rc-build]
    if: needs.rc-analysis.outputs.should-create-rc == 'true'
    continue-on-error: true
    
    steps:
      - name: 🛒 Checkout Repository
        uses: actions/checkout@v4

      - name: 📥 Download RC Package
        uses: actions/download-artifact@v4
        with:
          name: release-candidate-${{ needs.rc-analysis.outputs.rc-version }}

      - name: 🎭 E2E Test Suite
        uses: ./.github/workflows/reusable-test.yml
        with:
          node-version: ${{ env.NODE_VERSION }}
          test-type: 'e2e'
          anthropic-tests: true
          cache-key-suffix: 'rc-e2e'
        secrets:
          ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}

  rc-publish:
    name: 📦 Publish RC
    runs-on: ubuntu-latest
    needs: [rc-analysis, rc-build, rc-integration-tests]
    if: needs.rc-analysis.outputs.should-create-rc == 'true' && needs.rc-integration-tests.result == 'success'
    
    steps:
      - name: 🛒 Checkout Repository
        uses: actions/checkout@v4

      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          registry-url: 'https://registry.npmjs.org'

      - name: 📥 Download RC Package
        uses: actions/download-artifact@v4
        with:
          name: release-candidate-${{ needs.rc-analysis.outputs.rc-version }}

      - name: 📦 Publish RC to NPM
        run: |
          RC_VERSION="${{ needs.rc-analysis.outputs.rc-version }}"
          
          # Copy package.json from RC package
          cp rc-package/package.json .
          
          echo "📦 Publishing RC v$RC_VERSION to NPM..."
          npm publish --tag rc --access public
          echo "✅ RC published to NPM with 'rc' tag"
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: 🏷️ Create RC Tag
        if: github.event_name != 'pull_request'
        run: |
          RC_VERSION="${{ needs.rc-analysis.outputs.rc-version }}"
          
          # Configure git
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          
          # Create RC tag
          git tag -a "v$RC_VERSION" -m "Release Candidate v$RC_VERSION

          Changes: ${{ needs.rc-analysis.outputs.changes-summary }}
          
          🧪 This is a pre-release version for testing purposes.
          
          🤖 Generated with [GitHub Actions](https://github.com/${{ github.repository }}/actions)"
          
          git push origin "v$RC_VERSION"
          echo "✅ RC tag v$RC_VERSION created"

  rc-notification:
    name: 📢 RC Notification
    runs-on: ubuntu-latest
    needs: [rc-analysis, rc-publish, rc-e2e-tests]
    if: always() && needs.rc-analysis.outputs.should-create-rc == 'true'
    
    steps:
      - name: 📊 Generate RC Report
        run: |
          RC_VERSION="${{ needs.rc-analysis.outputs.rc-version }}"
          INTEGRATION_STATUS="${{ needs.rc-integration-tests.result }}"
          E2E_STATUS="${{ needs.rc-e2e-tests.result }}"
          PUBLISH_STATUS="${{ needs.rc-publish.result }}"
          
          echo "## 🧪 Release Candidate Report" >> $GITHUB_STEP_SUMMARY
          echo "- **RC Version:** $RC_VERSION" >> $GITHUB_STEP_SUMMARY
          echo "- **Base Version:** ${{ needs.rc-analysis.outputs.base-version }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Branch:** ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Changes:** ${{ needs.rc-analysis.outputs.changes-summary }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Test Results" >> $GITHUB_STEP_SUMMARY
          echo "- **Integration Tests:** $([ "$INTEGRATION_STATUS" = "success" ] && echo "✅ Passed" || echo "❌ Failed")" >> $GITHUB_STEP_SUMMARY
          echo "- **E2E Tests:** $([ "$E2E_STATUS" = "success" ] && echo "✅ Passed" || echo "⚠️ Failed/Skipped")" >> $GITHUB_STEP_SUMMARY
          echo "- **Published:** $([ "$PUBLISH_STATUS" = "success" ] && echo "✅ Yes" || echo "❌ No")" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Installation" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`bash" >> $GITHUB_STEP_SUMMARY
          echo "npm install claude-ecosystem-standard@$RC_VERSION" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY

      - name: 💬 Comment on PR
        if: github.event_name == 'pull_request' && needs.rc-publish.result == 'success'
        uses: actions/github-script@v7
        with:
          script: |
            const rcVersion = '${{ needs.rc-analysis.outputs.rc-version }}';
            const changes = '${{ needs.rc-analysis.outputs.changes-summary }}';
            
            const comment = `## 🧪 Release Candidate Ready!
            
            A release candidate has been created for this PR:
            
            **RC Version:** \`${rcVersion}\`
            **Changes:** ${changes}
            
            ### 📦 Installation
            \`\`\`bash
            npm install claude-ecosystem-standard@${rcVersion}
            \`\`\`
            
            ### 🧪 Testing
            Please test this RC version and report any issues before merging.
            
            ### 📊 Test Results
            - ✅ Integration Tests: Passed
            - ${{ needs.rc-e2e-tests.result == 'success' ? '✅' : '⚠️' }} E2E Tests: ${{ needs.rc-e2e-tests.result }}
            
            ---
            🤖 *Generated by GitHub Actions*`;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });