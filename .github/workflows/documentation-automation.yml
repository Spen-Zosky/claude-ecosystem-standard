name: 📚 Documentation Automation

on:
  workflow_dispatch:
    inputs:
      doc-type:
        description: 'Documentation type to generate'
        required: true
        type: choice
        options:
          - api-docs
          - user-guide
          - developer-docs
          - compliance-docs
          - anthropic-integration
          - all
      output-format:
        description: 'Output format'
        required: false
        default: 'html'
        type: choice
        options:
          - html
          - pdf
          - markdown
          - all
      publish-docs:
        description: 'Publish to GitHub Pages'
        required: false
        default: true
        type: boolean
  push:
    branches: [main]
    paths:
      - 'src/**/*.ts'
      - 'CLAUDE.md'
      - 'README.md'
      - 'docs/**'
  pull_request:
    branches: [main]
    paths:
      - 'src/**/*.ts'
      - 'CLAUDE.md'
      - 'README.md'
      - 'docs/**'

env:
  NODE_VERSION: '20.x'
  DOCS_OUTPUT_DIR: 'generated-docs'

jobs:
  docs-analysis:
    name: 📋 Documentation Analysis
    runs-on: ubuntu-latest
    outputs:
      doc-types: ${{ steps.analysis.outputs.doc-types }}
      should-generate: ${{ steps.analysis.outputs.should-generate }}
      changed-files: ${{ steps.analysis.outputs.changed-files }}
      version: ${{ steps.version.outputs.version }}
    
    steps:
      - name: 🛒 Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 📋 Analyze Documentation Requirements
        id: analysis
        run: |
          DOC_TYPE="${{ github.event.inputs.doc-type || 'all' }}"
          echo "📋 Analyzing documentation requirements..."
          echo "Doc Type: $DOC_TYPE"
          
          # Determine which documentation to generate
          case "$DOC_TYPE" in
            "api-docs")
              DOC_TYPES="api"
              ;;
            "user-guide")
              DOC_TYPES="user"
              ;;
            "developer-docs")
              DOC_TYPES="developer"
              ;;
            "compliance-docs")
              DOC_TYPES="compliance"
              ;;
            "anthropic-integration")
              DOC_TYPES="anthropic"
              ;;
            "all")
              DOC_TYPES="api,user,developer,compliance,anthropic"
              ;;
          esac
          
          echo "doc-types=$DOC_TYPES" >> $GITHUB_OUTPUT
          echo "🎯 Documentation types: $DOC_TYPES"
          
          # Check if documentation should be generated
          SHOULD_GENERATE="true"
          
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            # Only generate docs if relevant files changed
            CHANGED_FILES=$(git diff --name-only origin/${{ github.base_ref }}..HEAD | grep -E '\.(ts|js|md)$' || echo "")
            if [ -z "$CHANGED_FILES" ]; then
              SHOULD_GENERATE="false"
              echo "📭 No relevant files changed"
            fi
          else
            CHANGED_FILES=$(git diff --name-only HEAD~1..HEAD | grep -E '\.(ts|js|md)$' || echo "all")
          fi
          
          echo "should-generate=$SHOULD_GENERATE" >> $GITHUB_OUTPUT
          echo "changed-files=$CHANGED_FILES" >> $GITHUB_OUTPUT
          echo "🔍 Should generate: $SHOULD_GENERATE"

      - name: 📦 Extract Version
        id: version
        run: |
          VERSION=$(node -p "require('./package.json').version" 2>/dev/null || echo "2.7.0")
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "📦 Version: $VERSION"

  generate-api-docs:
    name: 📖 Generate API Documentation
    runs-on: ubuntu-latest
    needs: docs-analysis
    if: needs.docs-analysis.outputs.should-generate == 'true' && contains(needs.docs-analysis.outputs.doc-types, 'api')
    
    steps:
      - name: 🛒 Checkout Repository
        uses: actions/checkout@v4

      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install Dependencies
        run: |
          npm ci --prefer-offline --no-audit
          npm install -g typedoc @typedoc/plugin-markdown
          echo "✅ Dependencies installed"

      - name: 📖 Generate TypeScript API Documentation
        run: |
          echo "📖 Generating TypeScript API documentation..."
          
          mkdir -p ${{ env.DOCS_OUTPUT_DIR }}/api
          
          # Generate TypeDoc documentation
          npx typedoc \
            --out ${{ env.DOCS_OUTPUT_DIR }}/api \
            --theme default \
            --readme README.md \
            --includeVersion \
            --excludePrivate \
            --excludeProtected \
            --excludeInternal \
            --plugin @typedoc/plugin-markdown \
            src/index.ts
          
          echo "✅ TypeScript API documentation generated"

      - name: 🤖 Generate Anthropic Integration Docs
        run: |
          echo "🤖 Generating Anthropic integration documentation..."
          
          mkdir -p ${{ env.DOCS_OUTPUT_DIR }}/api/anthropic
          
          # Generate specialized Anthropic documentation
          cat > ${{ env.DOCS_OUTPUT_DIR }}/api/anthropic/README.md << 'EOF'
          # Anthropic AI Integration API Documentation
          
          ## Overview
          
          The Claude Ecosystem Standard provides comprehensive integration with Anthropic's Claude AI models through a dedicated SDK manager and CLI commands.
          
          ## Core Components
          
          ### AnthropicSDKManager
          
          The main class for managing Anthropic SDK operations:
          
          ```typescript
          import { AnthropicSDKManager } from './integrations/anthropic/AnthropicSDKManager';
          
          const manager = new AnthropicSDKManager({
            apiKey: process.env.ANTHROPIC_API_KEY,
            model: 'claude-3-haiku-20240307',
            maxTokens: 4096
          });
          
          // Make an AI call
          const response = await manager.ask('Explain TypeScript interfaces');
          console.log(response.content);
          ```
          
          ### Configuration Options
          
          | Option | Type | Default | Description |
          |--------|------|---------|-------------|
          | `apiKey` | string | `undefined` | Anthropic API key |
          | `model` | string | `claude-3-haiku-20240307` | Claude model to use |
          | `maxTokens` | number | `4096` | Maximum tokens per response |
          | `temperature` | number | `0.7` | Response creativity (0-1) |
          | `timeout` | number | `30000` | Request timeout in ms |
          | `maxRetries` | number | `2` | Maximum retry attempts |
          
          ### Available Models
          
          - `claude-3-haiku-20240307` - Fast and efficient
          - `claude-3-sonnet-20240229` - Balanced performance
          - `claude-3-opus-20240229` - Most capable
          - `claude-3-5-sonnet-20241022` - Latest Sonnet
          - `claude-3-5-haiku-20241022` - Latest Haiku
          
          ## CLI Commands
          
          ### AI Ask
          
          Direct question to Claude:
          
          ```bash
          npm run dev -- ai ask "How do I implement error handling in TypeScript?"
          npm run dev -- ai ask --stream "Explain async/await"
          npm run dev -- ai ask --model claude-3-opus-20240229 "Complex analysis task"
          ```
          
          ### Code Analysis
          
          Analyze code for security, performance, or quality:
          
          ```bash
          npm run dev -- ai analyze src/index.ts --type security
          npm run dev -- ai analyze src/config/ --type performance
          npm run dev -- ai analyze . --type quality
          ```
          
          ### Code Generation
          
          Generate code with AI assistance:
          
          ```bash
          npm run dev -- ai generate --language typescript --with-tests
          npm run dev -- ai generate --framework react --with-review
          ```
          
          ### Interactive Chat
          
          Start conversational AI session:
          
          ```bash
          npm run dev -- ai chat
          ```
          
          ### Usage Statistics
          
          View API usage and costs:
          
          ```bash
          npm run dev -- ai stats
          ```
          
          ## Error Handling
          
          The Anthropic integration includes comprehensive error handling:
          
          ```typescript
          try {
            const response = await manager.ask('Your question');
            console.log(response.content);
          } catch (error) {
            if (error instanceof AnthropicAPIError) {
              console.error('API Error:', error.message);
              console.error('Status:', error.status);
            } else if (error instanceof AnthropicRateLimitError) {
              console.error('Rate limit exceeded:', error.message);
              // Implement backoff strategy
            } else {
              console.error('Unexpected error:', error);
            }
          }
          ```
          
          ## Security Best Practices
          
          1. **API Key Management**
             - Never hardcode API keys in source code
             - Use environment variables or secure vaults
             - Rotate keys regularly
          
          2. **Input Validation**
             - Validate user input before sending to API
             - Implement rate limiting
             - Sanitize sensitive data
          
          3. **Response Handling**
             - Don't log API responses containing sensitive data
             - Implement proper error handling
             - Use streaming for long responses
          
          ## Rate Limiting
          
          The integration includes built-in rate limiting:
          
          ```typescript
          const manager = new AnthropicSDKManager({
            apiKey: process.env.ANTHROPIC_API_KEY,
            rateLimiting: {
              enabled: true,
              requestsPerMinute: 60,
              tokensPerMinute: 10000
            }
          });
          ```
          
          ## Cost Tracking
          
          Monitor API costs and token usage:
          
          ```typescript
          const usage = await manager.getUsageStats();
          console.log('Tokens used today:', usage.tokensToday);
          console.log('Estimated cost:', usage.estimatedCost);
          console.log('Requests made:', usage.requestCount);
          ```
          
          ## Integration with CES Features
          
          The Anthropic integration works seamlessly with other CES features:
          
          - **Analytics**: All AI calls are tracked in CES analytics
          - **Session Management**: AI usage is logged per session
          - **Auto-Recovery**: Failed API calls trigger recovery procedures
          - **Monitoring**: AI metrics are included in monitoring dashboards
          
          ## Examples
          
          See the `examples/anthropic-usage.ts` file for comprehensive examples of all Anthropic integration features.
          EOF
          
          echo "✅ Anthropic integration documentation generated"

      - name: 📤 Upload API Documentation
        uses: actions/upload-artifact@v4
        with:
          name: ces-api-docs-${{ needs.docs-analysis.outputs.version }}
          path: ${{ env.DOCS_OUTPUT_DIR }}/api/
          retention-days: 30

  generate-user-guide:
    name: 📘 Generate User Guide
    runs-on: ubuntu-latest
    needs: docs-analysis
    if: needs.docs-analysis.outputs.should-generate == 'true' && contains(needs.docs-analysis.outputs.doc-types, 'user')
    
    steps:
      - name: 🛒 Checkout Repository
        uses: actions/checkout@v4

      - name: 📘 Generate User Guide
        run: |
          echo "📘 Generating comprehensive user guide..."
          
          mkdir -p ${{ env.DOCS_OUTPUT_DIR }}/user-guide
          
          # Generate main user guide
          cat > ${{ env.DOCS_OUTPUT_DIR }}/user-guide/README.md << 'EOF'
          # Claude Ecosystem Standard - User Guide
          
          ## Welcome to CES v2.7.0
          
          Claude Ecosystem Standard (CES) is an enterprise-grade TypeScript foundation with integrated Claude Code CLI automation and native Anthropic SDK integration.
          
          ## Quick Start
          
          ### Installation
          
          ```bash
          # Clone the repository
          git clone https://github.com/your-org/claude-ecosystem-standard.git
          cd claude-ecosystem-standard
          
          # Install dependencies
          npm install
          
          # Build the project
          npm run build
          
          # Run tests
          npm test
          
          # Start your first session
          npm run dev -- start-session
          ```
          
          ### Environment Setup
          
          1. Copy the environment template:
             ```bash
             cp .env.template .env
             ```
          
          2. Configure your Anthropic API key (optional but recommended):
             ```bash
             echo "ANTHROPIC_API_KEY=your-api-key-here" >> .env
             ```
          
          3. Validate your setup:
             ```bash
             npm run dev -- validate
             ```
          
          ## Core Features
          
          ### 🤖 AI-Powered Development
          
          CES includes native Anthropic SDK integration for AI-assisted development:
          
          #### Ask Claude Directly
          ```bash
          npm run dev -- ai ask "Explain TypeScript interfaces"
          npm run dev -- ai ask --stream "Write a function to validate emails"
          ```
          
          #### Code Analysis
          ```bash
          npm run dev -- ai analyze src/index.ts --type security
          npm run dev -- ai analyze src/config/ --type performance
          ```
          
          #### Interactive AI Chat
          ```bash
          npm run dev -- ai chat
          ```
          
          ### 📊 Analytics & Monitoring
          
          #### Real-time Dashboard
          ```bash
          npm run dev -- dashboard --live
          ```
          
          #### Usage Analytics
          ```bash
          npm run dev -- analytics --dashboard
          npm run dev -- analytics --export
          ```
          
          #### AI Usage Statistics
          ```bash
          npm run dev -- ai stats
          ```
          
          ### 🔄 Session Management
          
          #### Start a Session
          ```bash
          npm run dev -- start-session
          ```
          
          #### Create Checkpoints
          ```bash
          npm run dev -- checkpoint-session --message "Feature complete"
          ```
          
          #### Close Session
          ```bash
          npm run dev -- close-session --save
          ```
          
          ### 🛠️ Development Tools
          
          #### Quick Commands
          ```bash
          npm run dev -- quick --list
          npm run dev -- quick --create myalias --command "npm test"
          npm run dev -- quick myalias
          ```
          
          #### Auto-Recovery
          ```bash
          npm run dev -- recovery --start
          npm run dev -- recovery --status
          ```
          
          ## Configuration
          
          CES supports 75+ environment variables for complete customization:
          
          ### Core Configuration
          ```bash
          NODE_ENV=development
          CES_VERSION=2.7.0
          CES_PROJECT_NAME=your-project-name
          CES_OPERATION_MODE=enterprise
          ```
          
          ### Anthropic Configuration
          ```bash
          ANTHROPIC_API_KEY=your-api-key
          CES_ANTHROPIC_MODEL=claude-3-haiku-20240307
          CES_ANTHROPIC_MAX_TOKENS=4096
          CES_ANTHROPIC_TEMPERATURE=0.7
          ```
          
          ### Analytics Configuration
          ```bash
          CES_ANALYTICS_ENABLED=true
          CES_ANALYTICS_BATCH_SIZE=50
          CES_DASHBOARD_ENABLED=true
          CES_DASHBOARD_REFRESH_INTERVAL=2000
          ```
          
          ## Common Workflows
          
          ### Daily Development Workflow
          
          1. **Start Your Day**
             ```bash
             npm run dev -- start-session
             npm run dev -- dashboard --live
             ```
          
          2. **Code with AI Assistance**
             ```bash
             # Get help with coding questions
             npm run dev -- ai ask "How to implement JWT authentication?"
             
             # Analyze your code
             npm run dev -- ai analyze src/auth/ --type security
             ```
          
          3. **Monitor Progress**
             ```bash
             npm run dev -- analytics --realtime
             ```
          
          4. **End Your Day**
             ```bash
             npm run dev -- checkpoint-session --message "Daily progress"
             npm run dev -- close-session --save
             ```
          
          ### Code Review Workflow
          
          1. **Analyze Changes**
             ```bash
             npm run dev -- ai analyze src/new-feature/ --type all
             ```
          
          2. **Generate Documentation**
             ```bash
             npm run dev -- ai ask "Document this new feature" < src/new-feature/README.md
             ```
          
          3. **Security Review**
             ```bash
             npm run dev -- ai analyze src/new-feature/ --type security
             ```
          
          ### Production Deployment Workflow
          
          1. **Pre-deployment Validation**
             ```bash
             npm run dev -- validate --verbose
             npm run test
             npm run lint
             ```
          
          2. **Create Release**
             ```bash
             # Automated via GitHub Actions
             git push origin main
             ```
          
          3. **Monitor Deployment**
             ```bash
             npm run dev -- monitor --start
             npm run dev -- analytics --dashboard
             ```
          
          ## Troubleshooting
          
          ### Common Issues
          
          #### "Command not found" Error
          ```bash
          # Ensure you've built the project
          npm run build
          
          # Check if dev script exists
          npm run dev -- --help
          ```
          
          #### Anthropic API Issues
          ```bash
          # Verify API key
          echo $ANTHROPIC_API_KEY
          
          # Test connection
          npm run dev -- ai ask "test" --model claude-3-haiku-20240307
          ```
          
          #### Session Issues
          ```bash
          # Reset session state
          npm run dev -- clean-reset --dry-run
          
          # Force new session
          npm run dev -- start-session --force
          ```
          
          ### Getting Help
          
          1. **Check Documentation**
             - README.md for overview
             - CLAUDE.md for detailed configuration
             - Generated API docs for technical details
          
          2. **Use Built-in Help**
             ```bash
             npm run dev -- --help
             npm run dev -- ai --help
             npm run dev -- analytics --help
             ```
          
          3. **Community Support**
             - GitHub Issues: Report bugs and request features
             - GitHub Discussions: Ask questions and share ideas
          
          ## Advanced Features
          
          ### Enterprise Integration
          
          CES includes enterprise-grade features:
          
          - **SSO Integration**: SAML, OAuth2, OIDC support
          - **Audit Logging**: Comprehensive audit trails
          - **Compliance**: SOC2, ISO27001, GDPR automation
          - **Governance**: Policy enforcement and approval workflows
          
          ### Cloud Integration
          
          ```bash
          npm run dev -- cloud --configure
          npm run dev -- cloud --backup
          npm run dev -- cloud --sync
          ```
          
          ### Custom Extensions
          
          CES supports custom plugins and extensions. See the developer documentation for details on creating custom managers and integrations.
          
          ## Best Practices
          
          ### Security
          - Never commit API keys to version control
          - Use environment variables for sensitive configuration
          - Regularly rotate API keys
          - Enable MFA for production environments
          
          ### Performance
          - Use appropriate Claude models for your use case
          - Implement rate limiting for API calls
          - Monitor token usage and costs
          - Cache frequently used AI responses
          
          ### Development
          - Use sessions to organize your work
          - Create regular checkpoints
          - Leverage AI assistance for code review
          - Monitor analytics for productivity insights
          
          ## What's Next?
          
          - Explore the Developer Documentation for advanced usage
          - Check out the API Documentation for integration details
          - Read the Compliance Documentation for enterprise features
          - Try the Anthropic Integration examples
          
          ---
          
          **Need Help?** Check our [troubleshooting guide](troubleshooting.md) or [create an issue](https://github.com/your-org/claude-ecosystem-standard/issues).
          EOF
          
          # Generate troubleshooting guide
          cat > ${{ env.DOCS_OUTPUT_DIR }}/user-guide/troubleshooting.md << 'EOF'
          # Troubleshooting Guide
          
          ## Installation Issues
          
          ### Node.js Version Issues
          
          **Problem**: "Node version not supported"
          **Solution**: CES requires Node.js 18+ (recommended: 20.x)
          
          ```bash
          # Check your Node.js version
          node --version
          
          # Install Node.js 20 via nvm
          nvm install 20
          nvm use 20
          ```
          
          ### NPM Dependencies Issues
          
          **Problem**: "Module not found" or dependency conflicts
          **Solution**: Clear cache and reinstall
          
          ```bash
          # Clear npm cache
          npm cache clean --force
          
          # Remove node_modules and package-lock.json
          rm -rf node_modules package-lock.json
          
          # Reinstall dependencies
          npm install
          ```
          
          ## Configuration Issues
          
          ### Environment Variables
          
          **Problem**: "Configuration not found" or "Invalid configuration"
          **Solution**: Verify environment setup
          
          ```bash
          # Copy template if missing
          cp .env.template .env
          
          # Validate configuration
          npm run dev -- validate --verbose
          
          # Check specific variables
          npm run dev -- config --show
          ```
          
          ### Anthropic API Issues
          
          **Problem**: "API key invalid" or "Authentication failed"
          **Solution**: Verify API key configuration
          
          ```bash
          # Check API key format (should start with sk-ant-)
          echo $ANTHROPIC_API_KEY | head -c 20
          
          # Test API connection
          npm run dev -- ai ask "test" --model claude-3-haiku-20240307
          
          # Check API quotas
          npm run dev -- ai stats
          ```
          
          ## Runtime Issues
          
          ### Session Management
          
          **Problem**: "Session not found" or "Session corrupted"
          **Solution**: Reset session state
          
          ```bash
          # Check session status
          npm run dev -- status
          
          # Clean reset (preview)
          npm run dev -- clean-reset --dry-run
          
          # Force new session
          npm run dev -- start-session --force
          ```
          
          ### Performance Issues
          
          **Problem**: Slow startup or high memory usage
          **Solution**: Optimize configuration
          
          ```bash
          # Disable analytics temporarily
          export CES_ANALYTICS_ENABLED=false
          
          # Reduce dashboard refresh rate
          export CES_DASHBOARD_REFRESH_INTERVAL=5000
          
          # Check system resources
          npm run dev -- monitor --status
          ```
          
          ## AI Integration Issues
          
          ### Rate Limiting
          
          **Problem**: "Rate limit exceeded"
          **Solution**: Implement backoff strategy
          
          ```bash
          # Check current usage
          npm run dev -- ai stats
          
          # Reduce API call frequency
          export CES_ANTHROPIC_MAX_RETRIES=1
          export CES_ANTHROPIC_TIMEOUT=60000
          ```
          
          ### Model Issues
          
          **Problem**: "Model not available" or "Model deprecated"
          **Solution**: Update model configuration
          
          ```bash
          # List available models
          npm run dev -- ai ask "list models" --model claude-3-haiku-20240307
          
          # Update model in config
          export CES_ANTHROPIC_MODEL=claude-3-5-sonnet-20241022
          ```
          
          ## Build and Deployment Issues
          
          ### TypeScript Compilation
          
          **Problem**: TypeScript errors during build
          **Solution**: Fix type issues
          
          ```bash
          # Check TypeScript configuration
          npm run type-check
          
          # Fix with AI assistance
          npm run dev -- ai analyze src/ --type quality
          
          # Generate type definitions
          npm run build
          ```
          
          ### Docker Issues
          
          **Problem**: Docker build fails or container won't start
          **Solution**: Verify Docker configuration
          
          ```bash
          # Check Docker version
          docker --version
          
          # Build with verbose output
          docker build -t ces:latest . --progress=plain
          
          # Check container logs
          docker logs ces-container
          ```
          
          ## Enterprise Features Issues
          
          ### SSO Integration
          
          **Problem**: "Authentication provider not configured"
          **Solution**: Configure SSO provider
          
          ```bash
          # Check SSO configuration
          ls -la .enterprise/sso/
          
          # Validate SAML metadata
          xmllint --noout .enterprise/sso/saml-config.xml
          ```
          
          ### Compliance Issues
          
          **Problem**: "Compliance check failed"
          **Solution**: Review compliance requirements
          
          ```bash
          # Run compliance checks
          python3 .enterprise/compliance/automated-checks.py SOC2
          
          # Generate compliance report
          .enterprise/compliance/generate-reports.sh SOC2
          ```
          
          ## Getting Additional Help
          
          ### Enable Debug Logging
          
          ```bash
          # Enable verbose logging
          export CES_LOG_LEVEL=debug
          export CES_VERBOSE_ERRORS=true
          
          # Run command with debug output
          npm run dev -- start-session --verbose
          ```
          
          ### Collect System Information
          
          ```bash
          # System information
          node --version
          npm --version
          docker --version
          
          # CES information
          npm run dev -- validate --verbose
          npm run dev -- status
          
          # Environment information
          env | grep CES_
          ```
          
          ### Create Support Request
          
          When creating a support request, include:
          
          1. **System Information**
             - Operating system and version
             - Node.js and npm versions
             - CES version
          
          2. **Error Details**
             - Complete error message
             - Steps to reproduce
             - Expected vs actual behavior
          
          3. **Configuration**
             - Relevant environment variables (redact sensitive data)
             - Configuration files (if applicable)
          
          4. **Logs**
             - Error logs with debug information
             - Session logs if relevant
          
          ### Community Resources
          
          - **GitHub Issues**: https://github.com/your-org/claude-ecosystem-standard/issues
          - **Documentation**: Generated docs and CLAUDE.md
          - **Examples**: Check examples/ directory
          - **Discord/Slack**: Community chat (if available)
          EOF
          
          echo "✅ User guide generated"

      - name: 📤 Upload User Guide
        uses: actions/upload-artifact@v4
        with:
          name: ces-user-guide-${{ needs.docs-analysis.outputs.version }}
          path: ${{ env.DOCS_OUTPUT_DIR }}/user-guide/
          retention-days: 30

  generate-developer-docs:
    name: 🔧 Generate Developer Documentation
    runs-on: ubuntu-latest
    needs: docs-analysis
    if: needs.docs-analysis.outputs.should-generate == 'true' && contains(needs.docs-analysis.outputs.doc-types, 'developer')
    
    steps:
      - name: 🛒 Checkout Repository
        uses: actions/checkout@v4

      - name: 🔧 Generate Developer Documentation
        run: |
          echo "🔧 Generating developer documentation..."
          
          mkdir -p ${{ env.DOCS_OUTPUT_DIR }}/developer
          
          # Generate main developer guide
          cat > ${{ env.DOCS_OUTPUT_DIR }}/developer/README.md << 'EOF'
          # Developer Documentation
          
          ## Architecture Overview
          
          CES follows a modular, enterprise-grade architecture with the following key components:
          
          ```
          src/
          ├── cli/                     # CLI managers and components
          │   ├── AISessionManager.ts  # AI-powered session optimization
          │   ├── AnalyticsManager.ts  # Usage analytics and insights
          │   ├── AnthropicCLI.ts      # Anthropic AI commands
          │   ├── AutoRecoveryManager.ts # Self-healing system
          │   ├── CLIManager.ts        # Main CLI interface
          │   ├── CloudIntegrationManager.ts # Cloud backup and sync
          │   ├── DashboardManager.ts  # Real-time monitoring
          │   ├── QuickCommandManager.ts # Rapid command aliases
          │   └── SystemCleanupManager.ts # System reset and cleanup
          ├── config/                  # Configuration management
          │   ├── ConfigManager.ts     # Core configuration
          │   └── EnvironmentConfig.ts # Enterprise environment config
          ├── integrations/            # External service integrations
          │   └── anthropic/          # Anthropic SDK integration
          │       ├── AnthropicSDKManager.ts # Core SDK manager
          │       └── AnthropicIntegrationHelper.ts # Smart execution helper
          ├── session/                 # Session management
          │   └── SessionManager.ts   # Session lifecycle
          ├── utils/                   # Enterprise utilities
          │   ├── Logger.ts           # Structured logging framework
          │   └── PathResolver.ts     # Portable path resolution
          └── types/                   # TypeScript definitions
          ```
          
          ## Core Patterns
          
          ### Manager Pattern
          
          CES uses a manager pattern for organizing functionality:
          
          ```typescript
          export abstract class BaseManager {
            protected config: EnvironmentConfig;
            protected logger: Logger;
            
            constructor(config: EnvironmentConfig) {
              this.config = config;
              this.logger = new Logger(this.constructor.name);
            }
            
            abstract initialize(): Promise<void>;
            abstract cleanup(): Promise<void>;
          }
          ```
          
          ### Configuration Pattern
          
          Type-safe configuration with validation:
          
          ```typescript
          export class EnvironmentConfig {
            private static instance: EnvironmentConfig;
            
            public static getInstance(): EnvironmentConfig {
              if (!EnvironmentConfig.instance) {
                EnvironmentConfig.instance = new EnvironmentConfig();
              }
              return EnvironmentConfig.instance;
            }
            
            public getAnthropicConfig(): AnthropicConfig {
              return {
                apiKey: this.get('ANTHROPIC_API_KEY'),
                model: this.get('CES_ANTHROPIC_MODEL', 'claude-3-haiku-20240307'),
                maxTokens: this.getNumber('CES_ANTHROPIC_MAX_TOKENS', 4096),
                temperature: this.getNumber('CES_ANTHROPIC_TEMPERATURE', 0.7)
              };
            }
          }
          ```
          
          ### Event-Driven Architecture
          
          CES uses events for loose coupling:
          
          ```typescript
          export class EventEmitter {
            private listeners: Map<string, Function[]> = new Map();
            
            on(event: string, callback: Function): void {
              if (!this.listeners.has(event)) {
                this.listeners.set(event, []);
              }
              this.listeners.get(event)!.push(callback);
            }
            
            emit(event: string, ...args: any[]): void {
              const callbacks = this.listeners.get(event) || [];
              callbacks.forEach(callback => callback(...args));
            }
          }
          ```
          
          ## Creating Custom Managers
          
          ### 1. Basic Manager Structure
          
          ```typescript
          import { BaseManager } from '../base/BaseManager';
          import { EnvironmentConfig } from '../config/EnvironmentConfig';
          
          export class CustomManager extends BaseManager {
            constructor(config: EnvironmentConfig) {
              super(config);
            }
            
            async initialize(): Promise<void> {
              this.logger.info('Initializing CustomManager');
              // Initialization logic
            }
            
            async cleanup(): Promise<void> {
              this.logger.info('Cleaning up CustomManager');
              // Cleanup logic
            }
            
            // Custom methods
            async performCustomOperation(): Promise<void> {
              // Implementation
            }
          }
          ```
          
          ### 2. Register Manager with CLI
          
          ```typescript
          // In CLIManager.ts
          private async initializeManagers(): Promise<void> {
            this.customManager = new CustomManager(this.config);
            await this.customManager.initialize();
            
            // Register CLI commands
            this.registerCommand('custom', this.handleCustomCommand.bind(this));
          }
          
          private async handleCustomCommand(args: string[]): Promise<void> {
            await this.customManager.performCustomOperation();
          }
          ```
          
          ### 3. Add Configuration
          
          ```typescript
          // In EnvironmentConfig.ts
          public getCustomConfig(): CustomConfig {
            return {
              enabled: this.getBoolean('CES_CUSTOM_ENABLED', true),
              option1: this.get('CES_CUSTOM_OPTION1', 'default'),
              option2: this.getNumber('CES_CUSTOM_OPTION2', 100)
            };
          }
          ```
          
          ## Anthropic Integration Development
          
          ### Custom AI Commands
          
          ```typescript
          export class CustomAICommand {
            constructor(
              private anthropicManager: AnthropicSDKManager,
              private logger: Logger
            ) {}
            
            async execute(prompt: string, options: CustomOptions): Promise<string> {
              try {
                const enhancedPrompt = this.enhancePrompt(prompt, options);
                const response = await this.anthropicManager.ask(enhancedPrompt);
                return this.processResponse(response);
              } catch (error) {
                this.logger.error('Custom AI command failed', error);
                throw error;
              }
            }
            
            private enhancePrompt(prompt: string, options: CustomOptions): string {
              // Add context, formatting, or constraints
              return `Context: ${options.context}\n\nTask: ${prompt}`;
            }
            
            private processResponse(response: string): string {
              // Post-process AI response
              return response.trim();
            }
          }
          ```
          
          ### AI Integration Patterns
          
          ```typescript
          // Streaming responses
          async function streamingAICall(prompt: string): Promise<void> {
            const stream = await anthropicManager.askStream(prompt);
            
            for await (const chunk of stream) {
              process.stdout.write(chunk);
            }
          }
          
          // Retry with backoff
          async function resilientAICall(prompt: string, maxRetries = 3): Promise<string> {
            for (let attempt = 1; attempt <= maxRetries; attempt++) {
              try {
                return await anthropicManager.ask(prompt);
              } catch (error) {
                if (attempt === maxRetries) throw error;
                
                const delay = Math.pow(2, attempt) * 1000; // Exponential backoff
                await new Promise(resolve => setTimeout(resolve, delay));
              }
            }
            throw new Error('Max retries exceeded');
          }
          
          // Cost tracking
          async function trackedAICall(prompt: string): Promise<string> {
            const startTime = Date.now();
            const startTokens = await anthropicManager.getTokenCount();
            
            try {
              const response = await anthropicManager.ask(prompt);
              
              const endTime = Date.now();
              const endTokens = await anthropicManager.getTokenCount();
              
              // Log usage metrics
              logger.info('AI call completed', {
                duration: endTime - startTime,
                tokensUsed: endTokens - startTokens,
                promptLength: prompt.length,
                responseLength: response.length
              });
              
              return response;
            } catch (error) {
              logger.error('AI call failed', error);
              throw error;
            }
          }
          ```
          
          ## Testing
          
          ### Unit Testing
          
          ```typescript
          import { CustomManager } from '../cli/CustomManager';
          import { EnvironmentConfig } from '../config/EnvironmentConfig';
          
          describe('CustomManager', () => {
            let manager: CustomManager;
            let config: EnvironmentConfig;
            
            beforeEach(() => {
              config = new EnvironmentConfig();
              manager = new CustomManager(config);
            });
            
            afterEach(async () => {
              await manager.cleanup();
            });
            
            it('should initialize successfully', async () => {
              await expect(manager.initialize()).resolves.not.toThrow();
            });
            
            it('should perform custom operation', async () => {
              await manager.initialize();
              await expect(manager.performCustomOperation()).resolves.not.toThrow();
            });
          });
          ```
          
          ### Integration Testing
          
          ```typescript
          import { CLIManager } from '../cli/CLIManager';
          
          describe('CLI Integration', () => {
            let cliManager: CLIManager;
            
            beforeEach(async () => {
              cliManager = new CLIManager();
              await cliManager.initialize();
            });
            
            it('should handle custom command', async () => {
              const result = await cliManager.executeCommand(['custom', '--option', 'value']);
              expect(result).toBeDefined();
            });
          });
          ```
          
          ### Anthropic Integration Testing
          
          ```typescript
          import { AnthropicSDKManager } from '../integrations/anthropic/AnthropicSDKManager';
          
          describe('Anthropic Integration', () => {
            let manager: AnthropicSDKManager;
            
            beforeEach(() => {
              manager = new AnthropicSDKManager({
                apiKey: 'test-key',
                model: 'claude-3-haiku-20240307'
              });
            });
            
            it('should make successful API call', async () => {
              // Mock API response
              jest.spyOn(manager, 'ask').mockResolvedValue({
                content: 'Test response',
                tokens: 100
              });
              
              const response = await manager.ask('Test prompt');
              expect(response.content).toBe('Test response');
            });
          });
          ```
          
          ## Build and Deployment
          
          ### Build Process
          
          ```bash
          # Development build
          npm run build:dev
          
          # Production build
          npm run build
          
          # Watch mode
          npm run build:watch
          
          # Type checking
          npm run type-check
          ```
          
          ### Docker Development
          
          ```dockerfile
          # Development Dockerfile
          FROM node:20-alpine
          
          WORKDIR /app
          COPY package*.json ./
          RUN npm ci
          
          COPY . .
          RUN npm run build
          
          EXPOSE 3000
          CMD ["npm", "run", "dev"]
          ```
          
          ### Environment Variables
          
          All CES environment variables are documented in `.env.template`. Key developer variables:
          
          ```bash
          # Development mode
          NODE_ENV=development
          CES_LOG_LEVEL=debug
          CES_VERBOSE_ERRORS=true
          
          # Anthropic development
          ANTHROPIC_API_KEY=your-dev-key
          CES_ANTHROPIC_MODEL=claude-3-haiku-20240307
          
          # Feature flags
          CES_ANALYTICS_ENABLED=true
          CES_AI_SESSION_ENABLED=true
          CES_DASHBOARD_ENABLED=true
          ```
          
          ## Contributing
          
          ### Code Style
          
          - Use TypeScript strict mode
          - Follow existing naming conventions
          - Add JSDoc comments for public APIs
          - Use async/await over Promises
          - Implement proper error handling
          
          ### Pull Request Process
          
          1. Create feature branch from `develop`
          2. Implement changes with tests
          3. Update documentation
          4. Run all checks: `npm run lint && npm run type-check && npm test`
          5. Create pull request with description
          6. Address review feedback
          
          ### Release Process
          
          CES uses automated semantic versioning:
          
          - `feat:` → Minor version bump
          - `fix:` → Patch version bump
          - `BREAKING:` → Major version bump
          - `docs:` → No version bump
          
          ## Advanced Topics
          
          ### Plugin System
          
          CES supports plugins for extending functionality:
          
          ```typescript
          export interface CESPlugin {
            name: string;
            version: string;
            initialize(config: EnvironmentConfig): Promise<void>;
            registerCommands(cli: CLIManager): void;
            cleanup(): Promise<void>;
          }
          ```
          
          ### Custom Anthropic Models
          
          Add support for new Claude models:
          
          ```typescript
          export const SUPPORTED_MODELS = {
            'claude-3-haiku-20240307': {
              name: 'Claude 3 Haiku',
              maxTokens: 200000,
              costPerToken: 0.00025
            },
            'custom-model': {
              name: 'Custom Model',
              maxTokens: 100000,
              costPerToken: 0.001
            }
          };
          ```
          
          ### Performance Optimization
          
          - Use lazy loading for heavy modules
          - Implement caching for API responses
          - Use streaming for large responses
          - Optimize TypeScript compilation
          - Profile memory usage
          
          ## Debugging
          
          ### Enable Debug Mode
          
          ```bash
          export CES_LOG_LEVEL=debug
          export CES_VERBOSE_ERRORS=true
          npm run dev -- --debug
          ```
          
          ### Common Debug Patterns
          
          ```typescript
          // Add debug logging
          this.logger.debug('Processing request', { requestId, data });
          
          // Add performance timing
          const startTime = performance.now();
          await someOperation();
          const duration = performance.now() - startTime;
          this.logger.debug('Operation completed', { duration });
          
          // Add error context
          try {
            await riskyOperation();
          } catch (error) {
            this.logger.error('Operation failed', {
              error: error.message,
              stack: error.stack,
              context: { additionalInfo }
            });
            throw error;
          }
          ```
          EOF
          
          echo "✅ Developer documentation generated"

      - name: 📤 Upload Developer Documentation
        uses: actions/upload-artifact@v4
        with:
          name: ces-developer-docs-${{ needs.docs-analysis.outputs.version }}
          path: ${{ env.DOCS_OUTPUT_DIR }}/developer/
          retention-days: 30

  publish-docs:
    name: 📰 Publish Documentation
    runs-on: ubuntu-latest
    needs: [docs-analysis, generate-api-docs, generate-user-guide, generate-developer-docs]
    if: needs.docs-analysis.outputs.should-generate == 'true' && github.ref == 'refs/heads/main' && (github.event.inputs.publish-docs == 'true' || github.event.inputs.publish-docs == null)
    permissions:
      contents: read
      pages: write
      id-token: write
    
    steps:
      - name: 🛒 Checkout Repository
        uses: actions/checkout@v4

      - name: 📥 Download All Documentation
        uses: actions/download-artifact@v4
        with:
          pattern: ces-*-docs-*
          merge-multiple: true
          path: docs-build/

      - name: 🔧 Setup Documentation Site
        run: |
          echo "🔧 Setting up documentation site..."
          
          mkdir -p docs-site
          
          # Create main documentation index
          cat > docs-site/index.html << 'EOF'
          <!DOCTYPE html>
          <html lang="en">
          <head>
              <meta charset="UTF-8">
              <meta name="viewport" content="width=device-width, initial-scale=1.0">
              <title>Claude Ecosystem Standard - Documentation</title>
              <style>
                  body {
                      font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
                      line-height: 1.6;
                      max-width: 1200px;
                      margin: 0 auto;
                      padding: 20px;
                      background: #f8fafc;
                  }
                  .header {
                      background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                      color: white;
                      padding: 2rem;
                      border-radius: 10px;
                      text-align: center;
                      margin-bottom: 2rem;
                  }
                  .grid {
                      display: grid;
                      grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
                      gap: 2rem;
                      margin-bottom: 2rem;
                  }
                  .card {
                      background: white;
                      padding: 2rem;
                      border-radius: 10px;
                      box-shadow: 0 2px 10px rgba(0,0,0,0.1);
                      transition: transform 0.2s;
                  }
                  .card:hover {
                      transform: translateY(-5px);
                  }
                  .card h3 {
                      color: #4a5568;
                      margin-top: 0;
                  }
                  .card p {
                      color: #718096;
                      margin-bottom: 1.5rem;
                  }
                  .btn {
                      display: inline-block;
                      padding: 0.8rem 1.5rem;
                      background: #667eea;
                      color: white;
                      text-decoration: none;
                      border-radius: 5px;
                      transition: background 0.2s;
                  }
                  .btn:hover {
                      background: #5a67d8;
                  }
                  .footer {
                      text-align: center;
                      color: #718096;
                      margin-top: 3rem;
                      padding-top: 2rem;
                      border-top: 1px solid #e2e8f0;
                  }
              </style>
          </head>
          <body>
              <div class="header">
                  <h1>🤖 Claude Ecosystem Standard</h1>
                  <p>Enterprise-grade TypeScript foundation with integrated Claude AI</p>
                  <p><strong>Version 2.7.0</strong> | <strong>Documentation Hub</strong></p>
              </div>
              
              <div class="grid">
                  <div class="card">
                      <h3>📘 User Guide</h3>
                      <p>Get started with CES, learn core features, and follow common workflows. Perfect for new users and daily reference.</p>
                      <a href="user-guide/" class="btn">Read User Guide</a>
                  </div>
                  
                  <div class="card">
                      <h3>🔧 Developer Documentation</h3>
                      <p>Architecture overview, patterns, and advanced development topics. Essential for contributors and plugin developers.</p>
                      <a href="developer/" class="btn">Developer Docs</a>
                  </div>
                  
                  <div class="card">
                      <h3>📖 API Documentation</h3>
                      <p>Complete TypeScript API reference with detailed interface documentation and code examples.</p>
                      <a href="api/" class="btn">API Reference</a>
                  </div>
                  
                  <div class="card">
                      <h3>🤖 Anthropic Integration</h3>
                      <p>Learn how to use Claude AI features, configure models, and implement AI-powered workflows.</p>
                      <a href="api/anthropic/" class="btn">AI Integration</a>
                  </div>
              </div>
              
              <div class="grid">
                  <div class="card">
                      <h3>🚀 Quick Start</h3>
                      <p>Get up and running in minutes with our quick start guide.</p>
                      <ul style="text-align: left;">
                          <li><code>npm install</code></li>
                          <li><code>cp .env.template .env</code></li>
                          <li><code>npm run dev -- start-session</code></li>
                      </ul>
                  </div>
                  
                  <div class="card">
                      <h3>🏢 Enterprise Features</h3>
                      <p>SSO, compliance automation, governance policies, and audit logging.</p>
                      <ul style="text-align: left;">
                          <li>SAML/OAuth2/OIDC Integration</li>
                          <li>SOC2/ISO27001/GDPR Compliance</li>
                          <li>Policy Enforcement</li>
                          <li>Comprehensive Audit Trails</li>
                      </ul>
                  </div>
              </div>
              
              <div class="footer">
                  <p>Generated automatically by CES Documentation System</p>
                  <p>Last updated: <span id="timestamp"></span></p>
                  <script>
                      document.getElementById('timestamp').textContent = new Date().toLocaleString();
                  </script>
              </div>
          </body>
          </html>
          EOF
          
          # Copy documentation files
          if [ -d "docs-build" ]; then
            cp -r docs-build/* docs-site/
          fi
          
          echo "✅ Documentation site prepared"

      - name: 📤 Upload Pages Artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: docs-site/

      - name: 🚀 Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

  docs-summary:
    name: 📊 Documentation Summary
    runs-on: ubuntu-latest
    needs: [docs-analysis, generate-api-docs, generate-user-guide, generate-developer-docs, publish-docs]
    if: always()
    
    steps:
      - name: 📊 Generate Documentation Summary
        run: |
          DOC_TYPE="${{ github.event.inputs.doc-type || 'all' }}"
          OUTPUT_FORMAT="${{ github.event.inputs.output-format || 'html' }}"
          PUBLISH_DOCS="${{ github.event.inputs.publish-docs || 'true' }}"
          VERSION="${{ needs.docs-analysis.outputs.version }}"
          
          echo "## 📚 Documentation Generation Summary" >> $GITHUB_STEP_SUMMARY
          echo "- **Documentation Type:** $DOC_TYPE" >> $GITHUB_STEP_SUMMARY
          echo "- **Output Format:** $OUTPUT_FORMAT" >> $GITHUB_STEP_SUMMARY
          echo "- **Version:** $VERSION" >> $GITHUB_STEP_SUMMARY
          echo "- **Publish to Pages:** $PUBLISH_DOCS" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Generation Status" >> $GITHUB_STEP_SUMMARY
          echo "- **Analysis:** ${{ needs.docs-analysis.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- **API Docs:** ${{ needs.generate-api-docs.result || 'skipped' }}" >> $GITHUB_STEP_SUMMARY
          echo "- **User Guide:** ${{ needs.generate-user-guide.result || 'skipped' }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Developer Docs:** ${{ needs.generate-developer-docs.result || 'skipped' }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Publishing:** ${{ needs.publish-docs.result || 'skipped' }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Documentation Contents" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ needs.generate-api-docs.result }}" = "success" ]; then
            echo "- ✅ **API Documentation**: TypeScript interfaces, Anthropic integration" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [ "${{ needs.generate-user-guide.result }}" = "success" ]; then
            echo "- ✅ **User Guide**: Quick start, features, workflows, troubleshooting" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [ "${{ needs.generate-developer-docs.result }}" = "success" ]; then
            echo "- ✅ **Developer Documentation**: Architecture, patterns, contributing" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [ "${{ needs.publish-docs.result }}" = "success" ]; then
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### 🌐 Published Documentation" >> $GITHUB_STEP_SUMMARY
            echo "Documentation is now available at: **GitHub Pages**" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Artifacts Generated" >> $GITHUB_STEP_SUMMARY
          echo "- ces-api-docs-$VERSION" >> $GITHUB_STEP_SUMMARY
          echo "- ces-user-guide-$VERSION" >> $GITHUB_STEP_SUMMARY
          echo "- ces-developer-docs-$VERSION" >> $GITHUB_STEP_SUMMARY