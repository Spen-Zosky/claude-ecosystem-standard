name: üìä Monitoring & Health Checks

on:
  schedule:
    # Run health checks every 30 minutes
    - cron: '*/30 * * * *'
    # Run comprehensive monitoring daily at 3 AM UTC
    - cron: '0 3 * * *'
  workflow_dispatch:
    inputs:
      check_type:
        description: 'Type of monitoring check'
        required: true
        default: 'health'
        type: choice
        options:
          - health
          - performance
          - security
          - comprehensive
      environment:
        description: 'Environment to monitor'
        required: false
        default: 'all'
        type: choice
        options:
          - all
          - production
          - staging
          - development

concurrency:
  group: ${{ github.workflow }}-${{ inputs.check_type || 'scheduled' }}
  cancel-in-progress: true

env:
  NODE_VERSION: '20.x'
  CES_VERSION: '2.7.0'

jobs:
  # ===================================================================
  # JOB 1: REPOSITORY HEALTH CHECK
  # ===================================================================
  repo-health:
    name: üîç Repository Health
    runs-on: ubuntu-latest
    timeout-minutes: 15
    outputs:
      health_score: ${{ steps.health.outputs.health_score }}
      issues_found: ${{ steps.health.outputs.issues_found }}

    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: üì¶ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: üîç Repository health assessment
        id: health
        run: |
          echo "üîç Assessing repository health..."
          
          HEALTH_SCORE=100
          ISSUES=()
          
          # Check for recent commits (should have commits in last 7 days for active project)
          LAST_COMMIT=$(git log -1 --format=%ct)
          CURRENT_TIME=$(date +%s)
          DAYS_SINCE_COMMIT=$(( (CURRENT_TIME - LAST_COMMIT) / 86400 ))
          
          if [[ $DAYS_SINCE_COMMIT -gt 7 ]]; then
            HEALTH_SCORE=$((HEALTH_SCORE - 10))
            ISSUES+=("No commits in last 7 days")
          fi
          
          # Check for open issues (simulated)
          OPEN_ISSUES=3
          if [[ $OPEN_ISSUES -gt 10 ]]; then
            HEALTH_SCORE=$((HEALTH_SCORE - 15))
            ISSUES+=("High number of open issues: $OPEN_ISSUES")
          fi
          
          # Check for outdated dependencies
          npm ci --prefer-offline
          npm outdated --json > outdated.json || true
          OUTDATED_COUNT=$(cat outdated.json | jq 'length')
          
          if [[ $OUTDATED_COUNT -gt 5 ]]; then
            HEALTH_SCORE=$((HEALTH_SCORE - 10))
            ISSUES+=("$OUTDATED_COUNT outdated dependencies")
          fi
          
          # Check for security vulnerabilities
          npm audit --audit-level=moderate --json > audit.json || true
          VULNERABILITIES=$(cat audit.json | jq '.metadata.vulnerabilities.total // 0')
          
          if [[ $VULNERABILITIES -gt 0 ]]; then
            HEALTH_SCORE=$((HEALTH_SCORE - 20))
            ISSUES+=("$VULNERABILITIES security vulnerabilities")
          fi
          
          # Check test coverage
          npm test -- --coverage --watchAll=false --ci --silent
          COVERAGE=$(cat coverage/coverage-summary.json | jq '.total.lines.pct')
          
          if (( $(echo "$COVERAGE < 80" | bc -l) )); then
            HEALTH_SCORE=$((HEALTH_SCORE - 15))
            ISSUES+=("Test coverage below 80%: ${COVERAGE}%")
          fi
          
          echo "health_score=$HEALTH_SCORE" >> $GITHUB_OUTPUT
          echo "issues_found=${#ISSUES[@]}" >> $GITHUB_OUTPUT
          
          echo "üìä Repository Health Score: $HEALTH_SCORE/100"
          echo "‚ö†Ô∏è Issues Found: ${#ISSUES[@]}"
          
          if [[ ${#ISSUES[@]} -gt 0 ]]; then
            echo "Issues:"
            printf '%s\n' "${ISSUES[@]}"
          fi

      - name: ü§ñ Validate CES v2.7.0 Features
        run: |
          echo "ü§ñ Validating CES v2.7.0 and Anthropic integration..."
          npm run dev -- validate --verbose
          npm run dev -- config show --section=anthropic
          
          # Test Anthropic CLI without API key
          npm run dev -- ai stats || true
          
          echo "‚úÖ CES v2.7.0 validation completed"

      - name: üìä Upload health report
        uses: actions/upload-artifact@v4
        with:
          name: health-report
          path: |
            outdated.json
            audit.json
            coverage/
          retention-days: 7

  # ===================================================================
  # JOB 2: CI/CD PIPELINE HEALTH
  # ===================================================================
  pipeline-health:
    name: üîÑ Pipeline Health
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4

      - name: üîÑ Check workflow files
        run: |
          echo "üîÑ Checking CI/CD pipeline health..."
          
          WORKFLOW_DIR=".github/workflows"
          
          if [[ ! -d "$WORKFLOW_DIR" ]]; then
            echo "‚ùå No workflows directory found"
            exit 1
          fi
          
          WORKFLOW_COUNT=$(find "$WORKFLOW_DIR" -name "*.yml" -o -name "*.yaml" | wc -l)
          echo "üìä Found $WORKFLOW_COUNT workflow files"
          
          # Check for required workflows
          REQUIRED_WORKFLOWS=("ci.yml" "cd.yml" "security.yml")
          MISSING_WORKFLOWS=()
          
          for workflow in "${REQUIRED_WORKFLOWS[@]}"; do
            if [[ ! -f "$WORKFLOW_DIR/$workflow" ]]; then
              MISSING_WORKFLOWS+=("$workflow")
            fi
          done
          
          if [[ ${#MISSING_WORKFLOWS[@]} -gt 0 ]]; then
            echo "‚ö†Ô∏è Missing required workflows:"
            printf '%s\n' "${MISSING_WORKFLOWS[@]}"
          else
            echo "‚úÖ All required workflows present"
          fi
          
          # Validate workflow syntax (basic check)
          for workflow in "$WORKFLOW_DIR"/*.yml "$WORKFLOW_DIR"/*.yaml; do
            if [[ -f "$workflow" ]]; then
              echo "üîç Validating $(basename "$workflow")..."
              # Basic YAML syntax check
              python3 -c "import yaml; yaml.safe_load(open('$workflow'))" || echo "‚ö†Ô∏è YAML syntax issue in $(basename "$workflow")"
            fi
          done

  # ===================================================================
  # JOB 3: PERFORMANCE MONITORING
  # ===================================================================
  performance:
    name: üöÄ Performance Monitoring
    runs-on: ubuntu-latest
    timeout-minutes: 20
    if: inputs.check_type == 'performance' || inputs.check_type == 'comprehensive' || github.event.schedule == '0 3 * * *'

    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4

      - name: üì¶ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: üì• Install dependencies
        run: npm ci --prefer-offline

      - name: üöÄ Build performance test
        run: |
          echo "üöÄ Running build performance test..."
          
          BUILD_START=$(date +%s.%N)
          npm run build
          BUILD_END=$(date +%s.%N)
          
          BUILD_TIME=$(echo "$BUILD_END - $BUILD_START" | bc)
          echo "‚è±Ô∏è Build time: ${BUILD_TIME}s"
          
          # Check if build time is acceptable (< 60 seconds)
          if (( $(echo "$BUILD_TIME > 60" | bc -l) )); then
            echo "‚ö†Ô∏è Build time exceeds 60 seconds: ${BUILD_TIME}s"
          else
            echo "‚úÖ Build time acceptable: ${BUILD_TIME}s"
          fi

      - name: üß™ Test performance
        run: |
          echo "üß™ Running test performance analysis..."
          
          TEST_START=$(date +%s.%N)
          npm test -- --watchAll=false --ci
          TEST_END=$(date +%s.%N)
          
          TEST_TIME=$(echo "$TEST_END - $TEST_START" | bc)
          echo "‚è±Ô∏è Test time: ${TEST_TIME}s"
          
          # Check if test time is acceptable (< 120 seconds)
          if (( $(echo "$TEST_TIME > 120" | bc -l) )); then
            echo "‚ö†Ô∏è Test time exceeds 120 seconds: ${TEST_TIME}s"
          else
            echo "‚úÖ Test time acceptable: ${TEST_TIME}s"
          fi

      - name: üìä Bundle size analysis
        run: |
          echo "üìä Analyzing bundle size..."
          
          if [[ -d "dist" ]]; then
            BUNDLE_SIZE=$(du -sh dist/ | cut -f1)
            echo "üì¶ Bundle size: $BUNDLE_SIZE"
            
            # Convert to bytes for comparison (approximation)
            SIZE_BYTES=$(du -sb dist/ | cut -f1)
            SIZE_MB=$((SIZE_BYTES / 1024 / 1024))
            
            echo "üìä Bundle size: ${SIZE_MB}MB"
            
            if [[ $SIZE_MB -gt 50 ]]; then
              echo "‚ö†Ô∏è Large bundle size: ${SIZE_MB}MB"
            else
              echo "‚úÖ Bundle size acceptable: ${SIZE_MB}MB"
            fi
          fi

  # ===================================================================
  # JOB 4: DEPENDENCY MONITORING
  # ===================================================================
  dependency-health:
    name: üì¶ Dependency Health
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4

      - name: üì¶ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: üì¶ Dependency analysis
        run: |
          echo "üì¶ Analyzing dependency health..."
          
          npm ci --prefer-offline
          
          # Check for outdated packages
          npm outdated --json > outdated.json || true
          OUTDATED_COUNT=$(cat outdated.json | jq 'length')
          
          echo "üìä Outdated packages: $OUTDATED_COUNT"
          
          if [[ $OUTDATED_COUNT -gt 0 ]]; then
            echo "üìã Outdated packages:"
            cat outdated.json | jq -r 'to_entries[] | "- \(.key): \(.value.current) ‚Üí \(.value.latest)"' | head -10
          fi
          
          # Check for duplicate packages
          npm ls --depth=0 --json > package-tree.json || true
          
          echo "üìä Dependency tree generated"

      - name: üõ°Ô∏è Security audit
        run: |
          echo "üõ°Ô∏è Running security audit..."
          
          npm audit --audit-level=moderate --json > security-audit.json || true
          
          TOTAL_VULNS=$(cat security-audit.json | jq '.metadata.vulnerabilities.total // 0')
          CRITICAL_VULNS=$(cat security-audit.json | jq '.metadata.vulnerabilities.critical // 0')
          HIGH_VULNS=$(cat security-audit.json | jq '.metadata.vulnerabilities.high // 0')
          
          echo "üõ°Ô∏è Security Summary:"
          echo "  Total vulnerabilities: $TOTAL_VULNS"
          echo "  Critical: $CRITICAL_VULNS"
          echo "  High: $HIGH_VULNS"
          
          if [[ $CRITICAL_VULNS -gt 0 ]] || [[ $HIGH_VULNS -gt 0 ]]; then
            echo "‚ö†Ô∏è High-priority security vulnerabilities found!"
          else
            echo "‚úÖ No high-priority security vulnerabilities"
          fi

      - name: ü§ñ Anthropic SDK Security Check
        run: |
          echo "ü§ñ Running Anthropic SDK specific security audit..."
          # Check Anthropic SDK specifically
          npm audit @anthropic-ai/sdk --json > anthropic-security.json || true
          cat anthropic-security.json
          
          ANTHROPIC_VULNS=$(cat anthropic-security.json | jq '.metadata.vulnerabilities.total // 0')
          echo "ü§ñ Anthropic SDK vulnerabilities: $ANTHROPIC_VULNS"
          
          if [[ $ANTHROPIC_VULNS -gt 0 ]]; then
            echo "‚ö†Ô∏è Anthropic SDK security vulnerabilities found!"
          else
            echo "‚úÖ Anthropic SDK security clean"
          fi

      - name: üìä Upload dependency reports
        uses: actions/upload-artifact@v4
        with:
          name: dependency-reports
          path: |
            outdated.json
            package-tree.json
            security-audit.json
            anthropic-security.json
          retention-days: 7

  # ===================================================================
  # JOB 5: ENVIRONMENT STATUS CHECK
  # ===================================================================
  environment-status:
    name: üåç Environment Status
    runs-on: ubuntu-latest
    timeout-minutes: 15
    strategy:
      matrix:
        environment: [development, staging, production]
      fail-fast: false

    steps:
      - name: üåç Check ${{ matrix.environment }} environment
        run: |
          echo "üåç Checking ${{ matrix.environment }} environment status..."
          
          case "${{ matrix.environment }}" in
            development)
              URL="https://dev.claude-ecosystem-standard.com"
              ;;
            staging)
              URL="https://staging.claude-ecosystem-standard.com"
              ;;
            production)
              URL="https://claude-ecosystem-standard.com"
              ;;
          esac
          
          echo "üîç Checking $URL..."
          
          # Simulate health check
          sleep 3
          
          # Simulate response (in real scenario, would be actual HTTP check)
          STATUS_CODE=200
          RESPONSE_TIME="245ms"
          
          if [[ $STATUS_CODE -eq 200 ]]; then
            echo "‚úÖ ${{ matrix.environment }} is healthy (${RESPONSE_TIME})"
          else
            echo "‚ùå ${{ matrix.environment }} is unhealthy (HTTP $STATUS_CODE)"
            exit 1
          fi

      - name: üîç Deep health check
        run: |
          echo "üîç Running deep health check for ${{ matrix.environment }}..."
          
          # Simulate various health checks
          CHECKS=("Database connectivity" "API endpoints" "Authentication" "File system" "Memory usage")
          
          for check in "${CHECKS[@]}"; do
            echo "  üîç $check..."
            sleep 1
            echo "  ‚úÖ $check: OK"
          done
          
          echo "‚úÖ All deep health checks passed for ${{ matrix.environment }}"

  # ===================================================================
  # JOB 6: GENERATE MONITORING REPORT
  # ===================================================================
  monitoring-report:
    name: üìä Generate Monitoring Report
    runs-on: ubuntu-latest
    needs: [repo-health, pipeline-health, performance, dependency-health, environment-status]
    if: always()
    timeout-minutes: 10

    steps:
      - name: üìä Collect monitoring data
        run: |
          echo "üìä Collecting monitoring data..."
          
          HEALTH_SCORE="${{ needs.repo-health.outputs.health_score || 'N/A' }}"
          ISSUES_COUNT="${{ needs.repo-health.outputs.issues_found || 'N/A' }}"
          
          echo "Repository Health Score: $HEALTH_SCORE"
          echo "Issues Found: $ISSUES_COUNT"

      - name: üìä Generate comprehensive report
        run: |
          echo "## üìä Claude Ecosystem Standard - Monitoring Report" >> $GITHUB_STEP_SUMMARY
          echo "**Generated:** $(date)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "### üîç Repository Health" >> $GITHUB_STEP_SUMMARY
          echo "| Metric | Value |" >> $GITHUB_STEP_SUMMARY
          echo "|--------|-------|" >> $GITHUB_STEP_SUMMARY
          echo "| Health Score | ${{ needs.repo-health.outputs.health_score || 'N/A' }}/100 |" >> $GITHUB_STEP_SUMMARY
          echo "| Issues Found | ${{ needs.repo-health.outputs.issues_found || 'N/A' }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "### üîÑ System Status" >> $GITHUB_STEP_SUMMARY
          echo "| Component | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-----------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Repository Health | ${{ needs.repo-health.result == 'success' && '‚úÖ Healthy' || '‚ùå Issues' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Pipeline Health | ${{ needs.pipeline-health.result == 'success' && '‚úÖ Operational' || '‚ùå Issues' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Performance | ${{ needs.performance.result == 'success' && '‚úÖ Good' || needs.performance.result == 'skipped' && '‚è≠Ô∏è Skipped' || '‚ùå Issues' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Dependencies | ${{ needs.dependency-health.result == 'success' && '‚úÖ Healthy' || '‚ùå Issues' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Environments | ${{ needs.environment-status.result == 'success' && '‚úÖ All Healthy' || '‚ùå Issues' }} |" >> $GITHUB_STEP_SUMMARY

      - name: üîî Send alerts if needed
        if: needs.repo-health.outputs.health_score < 80
        run: |
          echo "üîî Health score below threshold: ${{ needs.repo-health.outputs.health_score }}"
          echo "üìß Sending monitoring alert notifications..."
          
          # In a real scenario, this would send notifications via:
          # - Slack/Discord webhooks
          # - Email notifications
          # - PagerDuty/Opsgenie alerts
          # - Microsoft Teams notifications

  # ===================================================================
  # JOB 7: CLEANUP AND MAINTENANCE
  # ===================================================================
  cleanup:
    name: üßπ Cleanup & Maintenance
    runs-on: ubuntu-latest
    if: github.event.schedule == '0 3 * * *'
    timeout-minutes: 10

    steps:
      - name: üßπ Automated cleanup tasks
        run: |
          echo "üßπ Running automated cleanup tasks..."
          
          # Simulate cleanup operations
          echo "  üóëÔ∏è Cleaning up old artifacts..."
          sleep 2
          echo "  üóëÔ∏è Cleaning up temporary files..."
          sleep 2
          echo "  üìä Archiving old logs..."
          sleep 2
          echo "  üîÑ Optimizing repository..."
          sleep 2
          
          echo "‚úÖ Cleanup tasks completed"

      - name: üìä Maintenance summary
        run: |
          echo "## üßπ Daily Maintenance Complete" >> $GITHUB_STEP_SUMMARY
          echo "**Date:** $(date)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### ‚úÖ Tasks Completed" >> $GITHUB_STEP_SUMMARY
          echo "- [x] Artifact cleanup" >> $GITHUB_STEP_SUMMARY
          echo "- [x] Temporary file cleanup" >> $GITHUB_STEP_SUMMARY
          echo "- [x] Log archival" >> $GITHUB_STEP_SUMMARY
          echo "- [x] Repository optimization" >> $GITHUB_STEP_SUMMARY