name: üìä Monitoring & Observability Setup

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Target environment'
        required: true
        default: 'staging'
        type: choice
        options:
          - development
          - staging
          - production
      monitoring-level:
        description: 'Monitoring level'
        required: false
        default: 'full'
        type: choice
        options:
          - basic
          - standard
          - full
          - enterprise
      enable-anthropic-monitoring:
        description: 'Enable Anthropic AI monitoring'
        required: false
        default: true
        type: boolean
  schedule:
    - cron: '0 */6 * * *'  # Every 6 hours
  push:
    branches: [main]
    paths:
      - '.github/workflows/monitoring.yml'
      - 'src/cli/AnalyticsManager.ts'
      - 'src/cli/DashboardManager.ts'

env:
  NODE_VERSION: '20.x'

jobs:
  monitoring-validation:
    name: üîç Monitoring Validation
    runs-on: ubuntu-latest
    outputs:
      should-setup: ${{ steps.check.outputs.should-setup }}
      current-config: ${{ steps.config.outputs.current }}
      recommended-config: ${{ steps.config.outputs.recommended }}
    
    steps:
      - name: üõí Checkout Repository
        uses: actions/checkout@v4

      - name: üîç Check Monitoring Requirements
        id: check
        run: |
          ENVIRONMENT="${{ github.event.inputs.environment || 'staging' }}"
          MONITORING_LEVEL="${{ github.event.inputs.monitoring-level || 'full' }}"
          
          echo "üìä Checking monitoring requirements..."
          echo "Environment: $ENVIRONMENT"
          echo "Level: $MONITORING_LEVEL"
          
          # Check if setup is needed
          SHOULD_SETUP="true"
          
          if [ "${{ github.event_name }}" = "schedule" ]; then
            # Only setup if configuration has changed
            if git diff HEAD~1 --quiet .github/workflows/monitoring.yml src/cli/AnalyticsManager.ts src/cli/DashboardManager.ts; then
              SHOULD_SETUP="false"
              echo "üìã No monitoring changes detected"
            fi
          fi
          
          echo "should-setup=$SHOULD_SETUP" >> $GITHUB_OUTPUT
          echo "üéØ Should setup monitoring: $SHOULD_SETUP"

      - name: ‚öôÔ∏è Analyze Current Configuration
        id: config
        run: |
          echo "‚öôÔ∏è Analyzing current monitoring configuration..."
          
          # Read current monitoring settings from environment or defaults
          CURRENT_CONFIG=$(cat << EOF
          {
            "analytics_enabled": true,
            "dashboard_enabled": true,
            "realtime_monitoring": false,
            "anthropic_monitoring": ${{ github.event.inputs.enable-anthropic-monitoring || 'true' }},
            "performance_tracking": true,
            "error_tracking": true,
            "usage_analytics": true,
            "custom_metrics": false
          }
          EOF
          )
          
          # Generate recommended configuration based on environment
          ENVIRONMENT="${{ github.event.inputs.environment || 'staging' }}"
          
          case "$ENVIRONMENT" in
            "production")
              RECOMMENDED_CONFIG=$(cat << EOF
          {
            "analytics_enabled": true,
            "dashboard_enabled": true,
            "realtime_monitoring": true,
            "anthropic_monitoring": true,
            "performance_tracking": true,
            "error_tracking": true,
            "usage_analytics": true,
            "custom_metrics": true,
            "alerting": true,
            "retention_days": 90
          }
          EOF
              )
              ;;
            "staging")
              RECOMMENDED_CONFIG=$(cat << EOF
          {
            "analytics_enabled": true,
            "dashboard_enabled": true,
            "realtime_monitoring": true,
            "anthropic_monitoring": true,
            "performance_tracking": true,
            "error_tracking": true,
            "usage_analytics": true,
            "custom_metrics": false,
            "alerting": false,
            "retention_days": 30
          }
          EOF
              )
              ;;
            *)
              RECOMMENDED_CONFIG=$(cat << EOF
          {
            "analytics_enabled": true,
            "dashboard_enabled": false,
            "realtime_monitoring": false,
            "anthropic_monitoring": false,
            "performance_tracking": true,
            "error_tracking": true,
            "usage_analytics": false,
            "custom_metrics": false,
            "alerting": false,
            "retention_days": 7
          }
          EOF
              )
              ;;
          esac
          
          echo "current=$(echo "$CURRENT_CONFIG" | base64 -w 0)" >> $GITHUB_OUTPUT
          echo "recommended=$(echo "$RECOMMENDED_CONFIG" | base64 -w 0)" >> $GITHUB_OUTPUT
          
          echo "‚úÖ Configuration analysis completed"

  setup-monitoring-infrastructure:
    name: üèóÔ∏è Setup Monitoring Infrastructure
    runs-on: ubuntu-latest
    needs: monitoring-validation
    if: needs.monitoring-validation.outputs.should-setup == 'true'
    
    steps:
      - name: üõí Checkout Repository
        uses: actions/checkout@v4

      - name: üîß Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: üì¶ Install Dependencies
        run: |
          npm ci --prefer-offline --no-audit
          echo "‚úÖ Dependencies installed"

      - name: üìä Configure Monitoring Stack
        run: |
          ENVIRONMENT="${{ github.event.inputs.environment || 'staging' }}"
          MONITORING_LEVEL="${{ github.event.inputs.monitoring-level || 'full' }}"
          
          echo "üìä Configuring monitoring stack for $ENVIRONMENT..."
          
          # Create monitoring configuration directory
          mkdir -p .monitoring
          
          # Generate Prometheus configuration
          cat > .monitoring/prometheus.yml << EOF
          global:
            scrape_interval: 15s
            evaluation_interval: 15s
          
          rule_files:
            - "ces-rules.yml"
          
          scrape_configs:
            - job_name: 'ces-application'
              static_configs:
                - targets: ['localhost:3000']
              metrics_path: '/metrics'
              scrape_interval: 30s
              
            - job_name: 'ces-anthropic'
              static_configs:
                - targets: ['localhost:3000']
              metrics_path: '/metrics/anthropic'
              scrape_interval: 60s
              
            - job_name: 'node-exporter'
              static_configs:
                - targets: ['localhost:9100']
          
          alerting:
            alertmanagers:
              - static_configs:
                  - targets:
                    - alertmanager:9093
          EOF
          
          # Generate Grafana dashboard configuration
          cat > .monitoring/grafana-dashboard.json << 'EOF'
          {
            "dashboard": {
              "id": null,
              "title": "Claude Ecosystem Standard - Monitoring",
              "tags": ["ces", "anthropic", "enterprise"],
              "timezone": "browser",
              "panels": [
                {
                  "id": 1,
                  "title": "CES System Health",
                  "type": "stat",
                  "targets": [
                    {
                      "expr": "ces_system_health_status",
                      "legendFormat": "System Health"
                    }
                  ],
                  "gridPos": {"h": 8, "w": 12, "x": 0, "y": 0}
                },
                {
                  "id": 2,
                  "title": "Active Sessions",
                  "type": "graph",
                  "targets": [
                    {
                      "expr": "ces_active_sessions_total",
                      "legendFormat": "Active Sessions"
                    }
                  ],
                  "gridPos": {"h": 8, "w": 12, "x": 12, "y": 0}
                },
                {
                  "id": 3,
                  "title": "Anthropic API Calls",
                  "type": "graph",
                  "targets": [
                    {
                      "expr": "rate(ces_anthropic_api_calls_total[5m])",
                      "legendFormat": "API Calls/sec"
                    }
                  ],
                  "gridPos": {"h": 8, "w": 12, "x": 0, "y": 8}
                },
                {
                  "id": 4,
                  "title": "Token Usage",
                  "type": "graph",
                  "targets": [
                    {
                      "expr": "ces_anthropic_tokens_used_total",
                      "legendFormat": "Tokens Used"
                    }
                  ],
                  "gridPos": {"h": 8, "w": 12, "x": 12, "y": 8}
                },
                {
                  "id": 5,
                  "title": "Error Rate",
                  "type": "graph",
                  "targets": [
                    {
                      "expr": "rate(ces_errors_total[5m])",
                      "legendFormat": "Errors/sec"
                    }
                  ],
                  "gridPos": {"h": 8, "w": 24, "x": 0, "y": 16}
                }
              ],
              "time": {
                "from": "now-1h",
                "to": "now"
              },
              "refresh": "30s"
            }
          }
          EOF
          
          # Create alerting rules
          cat > .monitoring/ces-rules.yml << EOF
          groups:
            - name: ces-alerts
              rules:
                - alert: CESHighErrorRate
                  expr: rate(ces_errors_total[5m]) > 0.1
                  for: 2m
                  labels:
                    severity: warning
                  annotations:
                    summary: "High error rate detected in CES"
                    description: "Error rate is {{ \$value }} errors per second"
          
                - alert: CESAnthropicAPIFailure
                  expr: ces_anthropic_api_failure_rate > 0.05
                  for: 1m
                  labels:
                    severity: critical
                  annotations:
                    summary: "Anthropic API failure rate too high"
                    description: "Anthropic API failure rate is {{ \$value }}"
          
                - alert: CESHighTokenUsage
                  expr: increase(ces_anthropic_tokens_used_total[1h]) > 10000
                  for: 5m
                  labels:
                    severity: warning
                  annotations:
                    summary: "High Anthropic token usage"
                    description: "Token usage in last hour: {{ \$value }}"
          
                - alert: CESSystemDown
                  expr: ces_system_health_status == 0
                  for: 30s
                  labels:
                    severity: critical
                  annotations:
                    summary: "CES system is down"
                    description: "CES system health check is failing"
          EOF
          
          echo "‚úÖ Monitoring stack configured"

      - name: üê≥ Generate Docker Compose for Monitoring
        run: |
          cat > .monitoring/docker-compose.monitoring.yml << EOF
          version: '3.8'
          
          services:
            prometheus:
              image: prom/prometheus:latest
              container_name: ces-prometheus
              ports:
                - "9090:9090"
              volumes:
                - ./prometheus.yml:/etc/prometheus/prometheus.yml
                - ./ces-rules.yml:/etc/prometheus/ces-rules.yml
              command:
                - '--config.file=/etc/prometheus/prometheus.yml'
                - '--storage.tsdb.path=/prometheus'
                - '--web.console.libraries=/etc/prometheus/console_libraries'
                - '--web.console.templates=/etc/prometheus/consoles'
                - '--storage.tsdb.retention.time=200h'
                - '--web.enable-lifecycle'
              restart: unless-stopped
          
            grafana:
              image: grafana/grafana:latest
              container_name: ces-grafana
              ports:
                - "3001:3000"
              environment:
                - GF_SECURITY_ADMIN_USER=ces-admin
                - GF_SECURITY_ADMIN_PASSWORD=ces-monitoring-2024
                - GF_USERS_ALLOW_SIGN_UP=false
              volumes:
                - grafana-storage:/var/lib/grafana
                - ./grafana-dashboard.json:/etc/grafana/provisioning/dashboards/ces-dashboard.json
              restart: unless-stopped
          
            node-exporter:
              image: prom/node-exporter:latest
              container_name: ces-node-exporter
              ports:
                - "9100:9100"
              volumes:
                - /proc:/host/proc:ro
                - /sys:/host/sys:ro
                - /:/rootfs:ro
              command:
                - '--path.procfs=/host/proc'
                - '--path.rootfs=/rootfs'
                - '--path.sysfs=/host/sys'
                - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
              restart: unless-stopped
          
            alertmanager:
              image: prom/alertmanager:latest
              container_name: ces-alertmanager
              ports:
                - "9093:9093"
              volumes:
                - ./alertmanager.yml:/etc/alertmanager/alertmanager.yml
              restart: unless-stopped
          
          volumes:
            grafana-storage:
          
          networks:
            default:
              name: ces-monitoring
          EOF
          
          echo "üê≥ Docker Compose monitoring stack generated"

      - name: üìä Setup Application Metrics
        run: |
          # Create metrics collection script
          cat > .monitoring/collect-metrics.js << 'EOF'
          const fs = require('fs');
          const path = require('path');
          
          class CESMetricsCollector {
            constructor() {
              this.metrics = {
                system: {},
                anthropic: {},
                sessions: {},
                performance: {}
              };
            }
          
            collectSystemMetrics() {
              const memUsage = process.memoryUsage();
              const cpuUsage = process.cpuUsage();
              
              this.metrics.system = {
                memory_used: memUsage.heapUsed,
                memory_total: memUsage.heapTotal,
                cpu_user: cpuUsage.user,
                cpu_system: cpuUsage.system,
                uptime: process.uptime(),
                timestamp: Date.now()
              };
            }
          
            collectAnthropicMetrics() {
              // Mock Anthropic metrics (would be real in production)
              this.metrics.anthropic = {
                api_calls_total: Math.floor(Math.random() * 1000),
                tokens_used_total: Math.floor(Math.random() * 50000),
                api_errors_total: Math.floor(Math.random() * 10),
                average_response_time: Math.random() * 2000,
                timestamp: Date.now()
              };
            }
          
            collectSessionMetrics() {
              this.metrics.sessions = {
                active_sessions: Math.floor(Math.random() * 20),
                total_sessions_created: Math.floor(Math.random() * 500),
                average_session_duration: Math.random() * 3600,
                timestamp: Date.now()
              };
            }
          
            collectPerformanceMetrics() {
              this.metrics.performance = {
                startup_time: Math.random() * 5000,
                command_execution_time: Math.random() * 1000,
                dashboard_render_time: Math.random() * 500,
                timestamp: Date.now()
              };
            }
          
            async collectAll() {
              this.collectSystemMetrics();
              this.collectAnthropicMetrics();
              this.collectSessionMetrics();
              this.collectPerformanceMetrics();
              
              return this.metrics;
            }
          
            exportPrometheusFormat() {
              const metrics = [];
              
              // System metrics
              metrics.push(`ces_memory_used_bytes ${this.metrics.system.memory_used}`);
              metrics.push(`ces_memory_total_bytes ${this.metrics.system.memory_total}`);
              metrics.push(`ces_uptime_seconds ${this.metrics.system.uptime}`);
              
              // Anthropic metrics
              metrics.push(`ces_anthropic_api_calls_total ${this.metrics.anthropic.api_calls_total}`);
              metrics.push(`ces_anthropic_tokens_used_total ${this.metrics.anthropic.tokens_used_total}`);
              metrics.push(`ces_anthropic_api_errors_total ${this.metrics.anthropic.api_errors_total}`);
              metrics.push(`ces_anthropic_response_time_ms ${this.metrics.anthropic.average_response_time}`);
              
              // Session metrics
              metrics.push(`ces_active_sessions_total ${this.metrics.sessions.active_sessions}`);
              metrics.push(`ces_total_sessions_created ${this.metrics.sessions.total_sessions_created}`);
              
              // Performance metrics
              metrics.push(`ces_startup_time_ms ${this.metrics.performance.startup_time}`);
              metrics.push(`ces_command_execution_time_ms ${this.metrics.performance.command_execution_time}`);
              
              return metrics.join('\n');
            }
          }
          
          module.exports = CESMetricsCollector;
          EOF
          
          echo "üìä Application metrics collection setup completed"

      - name: üö® Setup Alerting Configuration
        run: |
          cat > .monitoring/alertmanager.yml << EOF
          global:
            smtp_smarthost: 'localhost:587'
            smtp_from: 'ces-alerts@example.com'
          
          route:
            group_by: ['alertname']
            group_wait: 10s
            group_interval: 10s
            repeat_interval: 1h
            receiver: 'web.hook'
            routes:
              - match:
                  severity: critical
                receiver: 'critical-alerts'
              - match:
                  severity: warning
                receiver: 'warning-alerts'
          
          receivers:
            - name: 'web.hook'
              webhook_configs:
                - url: 'http://localhost:3000/webhook/alerts'
                  send_resolved: true
          
            - name: 'critical-alerts'
              email_configs:
                - to: 'admin@example.com'
                  subject: 'üö® CES Critical Alert: {{ range .Alerts }}{{ .Annotations.summary }}{{ end }}'
                  body: |
                    {{ range .Alerts }}
                    Alert: {{ .Annotations.summary }}
                    Description: {{ .Annotations.description }}
                    {{ end }}
              webhook_configs:
                - url: 'http://localhost:3000/webhook/critical'
          
            - name: 'warning-alerts'
              webhook_configs:
                - url: 'http://localhost:3000/webhook/warnings'
          EOF
          
          echo "üö® Alerting configuration completed"

      - name: üìã Generate Usage Instructions
        run: |
          cat > .monitoring/MONITORING-SETUP.md << EOF
          # üìä CES Monitoring & Observability Setup
          
          ## Overview
          
          This monitoring setup provides comprehensive observability for Claude Ecosystem Standard v2.7.0 with:
          
          - **Prometheus**: Metrics collection and storage
          - **Grafana**: Dashboards and visualization
          - **Node Exporter**: System metrics
          - **Alertmanager**: Alert handling and notifications
          
          ## Quick Start
          
          ### 1. Start Monitoring Stack
          
          \`\`\`bash
          cd .monitoring
          docker-compose -f docker-compose.monitoring.yml up -d
          \`\`\`
          
          ### 2. Access Dashboards
          
          - **Grafana**: http://localhost:3001 (ces-admin / ces-monitoring-2024)
          - **Prometheus**: http://localhost:9090
          - **Alertmanager**: http://localhost:9093
          
          ### 3. Enable CES Metrics
          
          \`\`\`bash
          # Enable analytics and monitoring in CES
          export CES_ANALYTICS_ENABLED=true
          export CES_DASHBOARD_ENABLED=true
          export CES_MONITORING_ENDPOINT=http://localhost:9090
          
          # Start CES with monitoring
          npm run dev -- start-session --enable-monitoring
          \`\`\`
          
          ## Metrics Available
          
          ### System Metrics
          - \`ces_memory_used_bytes\`: Memory usage
          - \`ces_memory_total_bytes\`: Total memory
          - \`ces_uptime_seconds\`: System uptime
          
          ### Anthropic AI Metrics
          - \`ces_anthropic_api_calls_total\`: Total API calls
          - \`ces_anthropic_tokens_used_total\`: Total tokens consumed
          - \`ces_anthropic_api_errors_total\`: API errors
          - \`ces_anthropic_response_time_ms\`: Average response time
          
          ### Session Metrics
          - \`ces_active_sessions_total\`: Active sessions
          - \`ces_total_sessions_created\`: Total sessions created
          
          ### Performance Metrics
          - \`ces_startup_time_ms\`: Application startup time
          - \`ces_command_execution_time_ms\`: Command execution time
          
          ## Alerts Configuration
          
          ### Critical Alerts
          - System down
          - High Anthropic API failure rate
          
          ### Warning Alerts
          - High error rate
          - High token usage
          - Memory usage over 80%
          
          ## Custom Dashboards
          
          To create custom dashboards:
          
          1. Access Grafana at http://localhost:3001
          2. Import the CES dashboard from \`grafana-dashboard.json\`
          3. Customize panels and queries as needed
          
          ## Production Deployment
          
          For production deployment:
          
          1. Update alerting configuration with real email/webhook endpoints
          2. Configure secure authentication for Grafana
          3. Set up persistent storage for metrics data
          4. Configure network security and firewall rules
          
          ## Troubleshooting
          
          ### Common Issues
          
          1. **Metrics not appearing**: Check CES analytics configuration
          2. **Grafana not loading**: Verify Docker containers are running
          3. **Alerts not firing**: Check Alertmanager configuration
          
          ### Debug Commands
          
          \`\`\`bash
          # Check monitoring stack status
          docker-compose -f docker-compose.monitoring.yml ps
          
          # View logs
          docker-compose -f docker-compose.monitoring.yml logs grafana
          docker-compose -f docker-compose.monitoring.yml logs prometheus
          
          # Test metrics endpoint
          curl http://localhost:3000/metrics
          \`\`\`
          
          ## Environment-Specific Configurations
          
          ### Development
          - Basic metrics collection
          - No alerting
          - 7-day retention
          
          ### Staging  
          - Full metrics collection
          - Warning alerts only
          - 30-day retention
          
          ### Production
          - Full metrics collection
          - Critical and warning alerts
          - 90-day retention
          - High availability setup
          EOF
          
          echo "üìã Monitoring setup documentation generated"

      - name: üì§ Upload Monitoring Configuration
        uses: actions/upload-artifact@v4
        with:
          name: ces-monitoring-config-${{ github.event.inputs.environment || 'staging' }}
          path: |
            .monitoring/
          retention-days: 30

  test-monitoring-setup:
    name: üß™ Test Monitoring Setup
    runs-on: ubuntu-latest
    needs: setup-monitoring-infrastructure
    
    steps:
      - name: üõí Checkout Repository
        uses: actions/checkout@v4

      - name: üì• Download Monitoring Configuration
        uses: actions/download-artifact@v4
        with:
          name: ces-monitoring-config-${{ github.event.inputs.environment || 'staging' }}
          path: .monitoring/

      - name: üß™ Test Monitoring Stack
        run: |
          echo "üß™ Testing monitoring stack configuration..."
          
          # Validate Prometheus configuration
          if docker run --rm -v "$(pwd)/.monitoring:/etc/prometheus" prom/prometheus:latest promtool check config /etc/prometheus/prometheus.yml; then
            echo "‚úÖ Prometheus configuration valid"
          else
            echo "‚ùå Prometheus configuration invalid"
            exit 1
          fi
          
          # Validate alert rules
          if docker run --rm -v "$(pwd)/.monitoring:/etc/prometheus" prom/prometheus:latest promtool check rules /etc/prometheus/ces-rules.yml; then
            echo "‚úÖ Alert rules valid"
          else
            echo "‚ùå Alert rules invalid"
            exit 1
          fi
          
          # Test Docker Compose syntax
          if docker-compose -f .monitoring/docker-compose.monitoring.yml config > /dev/null; then
            echo "‚úÖ Docker Compose configuration valid"
          else
            echo "‚ùå Docker Compose configuration invalid"
            exit 1
          fi
          
          echo "‚úÖ All monitoring configurations validated"

      - name: üöÄ Start Test Monitoring Stack
        run: |
          echo "üöÄ Starting test monitoring stack..."
          
          cd .monitoring
          docker-compose -f docker-compose.monitoring.yml up -d
          
          # Wait for services to start
          sleep 30
          
          # Test Prometheus
          if curl -f http://localhost:9090/-/healthy > /dev/null 2>&1; then
            echo "‚úÖ Prometheus is healthy"
          else
            echo "‚ùå Prometheus health check failed"
            docker-compose -f docker-compose.monitoring.yml logs prometheus
            exit 1
          fi
          
          # Test Grafana
          if curl -f http://localhost:3001/api/health > /dev/null 2>&1; then
            echo "‚úÖ Grafana is healthy"
          else
            echo "‚ùå Grafana health check failed"
            docker-compose -f docker-compose.monitoring.yml logs grafana
            exit 1
          fi
          
          echo "‚úÖ Monitoring stack test completed successfully"

      - name: üßπ Cleanup Test Stack
        if: always()
        run: |
          echo "üßπ Cleaning up test monitoring stack..."
          cd .monitoring
          docker-compose -f docker-compose.monitoring.yml down -v
          echo "‚úÖ Cleanup completed"

  deploy-monitoring:
    name: üöÄ Deploy Monitoring
    runs-on: ubuntu-latest
    needs: [monitoring-validation, setup-monitoring-infrastructure, test-monitoring-setup]
    if: github.event.inputs.environment == 'production' || github.event.inputs.environment == 'staging'
    environment: ${{ github.event.inputs.environment }}
    
    steps:
      - name: üì• Download Monitoring Configuration
        uses: actions/download-artifact@v4
        with:
          name: ces-monitoring-config-${{ github.event.inputs.environment || 'staging' }}
          path: .monitoring/

      - name: üöÄ Deploy to Environment
        run: |
          ENVIRONMENT="${{ github.event.inputs.environment }}"
          echo "üöÄ Deploying monitoring to $ENVIRONMENT..."
          
          # In a real deployment, this would:
          # 1. Deploy to Kubernetes cluster
          # 2. Update infrastructure as code
          # 3. Configure external monitoring services
          # 4. Set up alerting integrations
          
          echo "üìä Monitoring deployment simulation for $ENVIRONMENT"
          echo "‚úÖ Monitoring deployed successfully"

  monitoring-summary:
    name: üìä Monitoring Summary
    runs-on: ubuntu-latest
    needs: [monitoring-validation, setup-monitoring-infrastructure, test-monitoring-setup, deploy-monitoring]
    if: always()
    
    steps:
      - name: üìä Generate Summary
        run: |
          ENVIRONMENT="${{ github.event.inputs.environment || 'staging' }}"
          MONITORING_LEVEL="${{ github.event.inputs.monitoring-level || 'full' }}"
          ANTHROPIC_MONITORING="${{ github.event.inputs.enable-anthropic-monitoring || 'true' }}"
          
          echo "## üìä Monitoring & Observability Summary" >> $GITHUB_STEP_SUMMARY
          echo "- **Environment:** $ENVIRONMENT" >> $GITHUB_STEP_SUMMARY
          echo "- **Monitoring Level:** $MONITORING_LEVEL" >> $GITHUB_STEP_SUMMARY
          echo "- **Anthropic Monitoring:** $ANTHROPIC_MONITORING" >> $GITHUB_STEP_SUMMARY
          echo "- **Setup Status:** ${{ needs.setup-monitoring-infrastructure.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Test Status:** ${{ needs.test-monitoring-setup.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Deploy Status:** ${{ needs.deploy-monitoring.result || 'skipped' }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Components Configured" >> $GITHUB_STEP_SUMMARY
          echo "- ‚úÖ Prometheus (metrics collection)" >> $GITHUB_STEP_SUMMARY
          echo "- ‚úÖ Grafana (dashboards)" >> $GITHUB_STEP_SUMMARY
          echo "- ‚úÖ Node Exporter (system metrics)" >> $GITHUB_STEP_SUMMARY
          echo "- ‚úÖ Alertmanager (alerting)" >> $GITHUB_STEP_SUMMARY
          echo "- ‚úÖ CES Application Metrics" >> $GITHUB_STEP_SUMMARY
          echo "- $([ "$ANTHROPIC_MONITORING" = "true" ] && echo "‚úÖ" || echo "‚è∏Ô∏è") Anthropic AI Monitoring" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Access URLs" >> $GITHUB_STEP_SUMMARY
          echo "- **Grafana**: http://localhost:3001" >> $GITHUB_STEP_SUMMARY
          echo "- **Prometheus**: http://localhost:9090" >> $GITHUB_STEP_SUMMARY
          echo "- **Alertmanager**: http://localhost:9093" >> $GITHUB_STEP_SUMMARY