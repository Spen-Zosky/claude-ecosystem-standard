name: 'Reusable: Security Scan'

on:
  workflow_call:
    inputs:
      scan-type:
        description: 'Type of security scan (sast, dependency, secrets, all)'
        required: false
        default: 'all'
        type: string
      severity-threshold:
        description: 'Minimum severity to fail build (low, medium, high, critical)'
        required: false
        default: 'high'
        type: string
      anthropic-security:
        description: 'Include Anthropic SDK security checks'
        required: false
        default: true
        type: boolean
      upload-sarif:
        description: 'Upload SARIF results to GitHub Security'
        required: false
        default: true
        type: boolean
    outputs:
      vulnerabilities-found:
        description: 'Number of vulnerabilities found'
        value: ${{ jobs.security.outputs.vulnerabilities }}
      critical-issues:
        description: 'Number of critical security issues'
        value: ${{ jobs.security.outputs.critical-issues }}
      scan-success:
        description: 'Security scan success status'
        value: ${{ jobs.security.outputs.success }}
    secrets:
      ANTHROPIC_API_KEY:
        description: 'Anthropic API key for security testing'
        required: false
      SNYK_TOKEN:
        description: 'Snyk token for vulnerability scanning'
        required: false

jobs:
  security:
    name: Security Analysis
    runs-on: ubuntu-latest
    permissions:
      security-events: write
      contents: read
      actions: read
    outputs:
      vulnerabilities: ${{ steps.summary.outputs.vulnerabilities }}
      critical-issues: ${{ steps.summary.outputs.critical-issues }}
      success: ${{ steps.final.outputs.success }}
    
    steps:
      - name: 🛒 Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'

      - name: 📦 Install Dependencies
        run: |
          npm ci --prefer-offline --no-audit
          npm run build
          echo "✅ Dependencies installed and project built"

      - name: 🔍 Dependency Vulnerability Scan
        if: inputs.scan-type == 'dependency' || inputs.scan-type == 'all'
        id: dependency-scan
        run: |
          # NPM Audit
          npm audit --audit-level=${{ inputs.severity-threshold }} --json > npm-audit.json || true
          
          # Extract vulnerability count
          VULN_COUNT=$(node -e "
            try {
              const audit = JSON.parse(require('fs').readFileSync('npm-audit.json'));
              console.log(audit.metadata?.vulnerabilities?.total || 0);
            } catch(e) { console.log(0); }
          ")
          
          echo "dependency-vulnerabilities=$VULN_COUNT" >> $GITHUB_OUTPUT
          echo "🔍 Found $VULN_COUNT dependency vulnerabilities"
          
          # Check for Anthropic SDK vulnerabilities
          if [ "${{ inputs.anthropic-security }}" = "true" ]; then
            if npm audit --json | grep -q "@anthropic-ai"; then
              echo "⚠️ Anthropic SDK vulnerability found"
              echo "anthropic-vulnerable=true" >> $GITHUB_OUTPUT
            else
              echo "✅ Anthropic SDK clean"
              echo "anthropic-vulnerable=false" >> $GITHUB_OUTPUT
            fi
          fi
        continue-on-error: true

      - name: 🔐 Secret Scanning
        if: inputs.scan-type == 'secrets' || inputs.scan-type == 'all'
        id: secret-scan
        run: |
          # Create temporary secret patterns file
          cat > .secret-patterns << EOF
          # Anthropic API Keys
          sk-ant-[a-zA-Z0-9_-]{95,}
          
          # Generic patterns
          (?i)(api[_-]?key|secret|token|password)\s*[:=]\s*['""][^'""]{8,}['""]
          
          # JWT tokens
          eyJ[A-Za-z0-9_-]*\.[A-Za-z0-9_-]*\.[A-Za-z0-9_-]*
          
          # GitHub tokens
          ghp_[A-Za-z0-9]{36}
          gho_[A-Za-z0-9]{36}
          ghu_[A-Za-z0-9]{36}
          ghs_[A-Za-z0-9]{36}
          ghr_[A-Za-z0-9]{36}
          EOF
          
          # Scan for secrets
          SECRET_COUNT=0
          while IFS= read -r pattern; do
            if [[ ! "$pattern" =~ ^#.* ]] && [[ -n "$pattern" ]]; then
              MATCHES=$(grep -r -E "$pattern" . --exclude-dir=node_modules --exclude-dir=.git --exclude="*.log" || true)
              if [ -n "$MATCHES" ]; then
                echo "🚨 Secret pattern found: $pattern"
                echo "$MATCHES"
                SECRET_COUNT=$((SECRET_COUNT + 1))
              fi
            fi
          done < .secret-patterns
          
          echo "secrets-found=$SECRET_COUNT" >> $GITHUB_OUTPUT
          echo "🔐 Found $SECRET_COUNT potential secrets"
        continue-on-error: true

      - name: 🛡️ Static Application Security Testing (SAST)
        if: inputs.scan-type == 'sast' || inputs.scan-type == 'all'
        id: sast-scan
        run: |
          # ESLint Security Plugin
          npx eslint . --ext .ts,.js --format json --output-file eslint-security.json || true
          
          # Semgrep for advanced SAST
          pip install semgrep
          semgrep --config=auto --json --output=semgrep-results.json . || true
          
          # Count SAST issues
          ESLINT_ISSUES=$(node -e "
            try {
              const results = JSON.parse(require('fs').readFileSync('eslint-security.json'));
              console.log(results.reduce((sum, file) => sum + file.messages.filter(msg => msg.severity === 2).length, 0));
            } catch(e) { console.log(0); }
          ")
          
          SEMGREP_ISSUES=$(node -e "
            try {
              const results = JSON.parse(require('fs').readFileSync('semgrep-results.json'));
              console.log(results.results?.length || 0);
            } catch(e) { console.log(0); }
          ")
          
          TOTAL_SAST=$((ESLINT_ISSUES + SEMGREP_ISSUES))
          echo "sast-issues=$TOTAL_SAST" >> $GITHUB_OUTPUT
          echo "🛡️ Found $TOTAL_SAST SAST issues (ESLint: $ESLINT_ISSUES, Semgrep: $SEMGREP_ISSUES)"
        continue-on-error: true

      - name: 🤖 Anthropic SDK Security Check
        if: inputs.anthropic-security
        id: anthropic-security
        run: |
          echo "🤖 Checking Anthropic SDK security patterns..."
          
          # Check for hardcoded API keys
          HARDCODED_KEYS=$(grep -r "sk-ant-" src/ --include="*.ts" --include="*.js" | wc -l || echo "0")
          
          # Check for insecure API usage patterns
          INSECURE_PATTERNS=0
          
          # Pattern 1: Unvalidated user input to API
          if grep -r "anthropic.*prompt.*req\." src/ > /dev/null; then
            echo "⚠️ Found potential unvalidated user input to Anthropic API"
            INSECURE_PATTERNS=$((INSECURE_PATTERNS + 1))
          fi
          
          # Pattern 2: API key in environment without validation
          if grep -r "ANTHROPIC_API_KEY" src/ | grep -v "validation\|check\|validate" > /dev/null; then
            echo "⚠️ Found Anthropic API key usage without validation"
            INSECURE_PATTERNS=$((INSECURE_PATTERNS + 1))
          fi
          
          # Pattern 3: Logging API responses
          if grep -r "console.log.*anthropic\|logger.*anthropic" src/ > /dev/null; then
            echo "⚠️ Found potential Anthropic API response logging"
            INSECURE_PATTERNS=$((INSECURE_PATTERNS + 1))
          fi
          
          echo "anthropic-hardcoded-keys=$HARDCODED_KEYS" >> $GITHUB_OUTPUT
          echo "anthropic-insecure-patterns=$INSECURE_PATTERNS" >> $GITHUB_OUTPUT
          echo "🤖 Anthropic security check: $HARDCODED_KEYS hardcoded keys, $INSECURE_PATTERNS insecure patterns"
        env:
          ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
        continue-on-error: true

      - name: 📊 Generate Security Summary
        id: summary
        run: |
          DEPENDENCY_VULNS="${{ steps.dependency-scan.outputs.dependency-vulnerabilities || '0' }}"
          SECRETS_FOUND="${{ steps.secret-scan.outputs.secrets-found || '0' }}"
          SAST_ISSUES="${{ steps.sast-scan.outputs.sast-issues || '0' }}"
          ANTHROPIC_KEYS="${{ steps.anthropic-security.outputs.anthropic-hardcoded-keys || '0' }}"
          ANTHROPIC_PATTERNS="${{ steps.anthropic-security.outputs.anthropic-insecure-patterns || '0' }}"
          
          TOTAL_VULNS=$((DEPENDENCY_VULNS + SECRETS_FOUND + SAST_ISSUES + ANTHROPIC_KEYS + ANTHROPIC_PATTERNS))
          
          # Determine critical issues (secrets + hardcoded keys)
          CRITICAL_ISSUES=$((SECRETS_FOUND + ANTHROPIC_KEYS))
          
          echo "vulnerabilities=$TOTAL_VULNS" >> $GITHUB_OUTPUT
          echo "critical-issues=$CRITICAL_ISSUES" >> $GITHUB_OUTPUT
          
          echo "## 🛡️ Security Scan Summary" >> $GITHUB_STEP_SUMMARY
          echo "- **Total Issues:** $TOTAL_VULNS" >> $GITHUB_STEP_SUMMARY
          echo "- **Critical Issues:** $CRITICAL_ISSUES" >> $GITHUB_STEP_SUMMARY
          echo "- **Dependency Vulnerabilities:** $DEPENDENCY_VULNS" >> $GITHUB_STEP_SUMMARY
          echo "- **Secrets Found:** $SECRETS_FOUND" >> $GITHUB_STEP_SUMMARY
          echo "- **SAST Issues:** $SAST_ISSUES" >> $GITHUB_STEP_SUMMARY
          echo "- **Anthropic Hardcoded Keys:** $ANTHROPIC_KEYS" >> $GITHUB_STEP_SUMMARY
          echo "- **Anthropic Insecure Patterns:** $ANTHROPIC_PATTERNS" >> $GITHUB_STEP_SUMMARY

      - name: 📋 Create SARIF Report
        if: inputs.upload-sarif
        run: |
          cat > security-results.sarif << 'EOF'
          {
            "$schema": "https://raw.githubusercontent.com/oasis-tcs/sarif-spec/master/Schemata/sarif-schema-2.1.0.json",
            "version": "2.1.0",
            "runs": [
              {
                "tool": {
                  "driver": {
                    "name": "CES Security Scanner",
                    "version": "2.7.0",
                    "informationUri": "https://github.com/anthropics/claude-ecosystem-standard"
                  }
                },
                "results": []
              }
            ]
          }
          EOF
          
          # Add results based on findings
          if [ "${{ steps.secret-scan.outputs.secrets-found }}" != "0" ]; then
            echo "📋 Adding secret findings to SARIF"
          fi
          
          if [ "${{ steps.anthropic-security.outputs.anthropic-hardcoded-keys }}" != "0" ]; then
            echo "📋 Adding Anthropic key findings to SARIF"
          fi

      - name: 📤 Upload SARIF Results
        if: inputs.upload-sarif && always()
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: security-results.sarif
          category: ces-security-scan

      - name: 📤 Upload Security Artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: security-scan-results
          path: |
            npm-audit.json
            eslint-security.json
            semgrep-results.json
            security-results.sarif
          retention-days: 30

      - name: 🎯 Final Security Status
        id: final
        run: |
          CRITICAL_ISSUES="${{ steps.summary.outputs.critical-issues }}"
          TOTAL_VULNS="${{ steps.summary.outputs.vulnerabilities }}"
          
          if [ "$CRITICAL_ISSUES" -gt "0" ]; then
            echo "❌ Critical security issues found: $CRITICAL_ISSUES"
            echo "success=false" >> $GITHUB_OUTPUT
            exit 1
          elif [ "${{ inputs.severity-threshold }}" = "medium" ] && [ "$TOTAL_VULNS" -gt "0" ]; then
            echo "❌ Security vulnerabilities found above threshold: $TOTAL_VULNS"
            echo "success=false" >> $GITHUB_OUTPUT
            exit 1
          else
            echo "✅ Security scan passed"
            echo "success=true" >> $GITHUB_OUTPUT
            exit 0
          fi