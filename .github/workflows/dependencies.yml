name: 📦 Dependency Management

on:
  schedule:
    # Check for updates daily at 6 AM UTC
    - cron: '0 6 * * *'
  workflow_dispatch:
    inputs:
      update_type:
        description: 'Type of updates to apply'
        required: true
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major
          - all

concurrency:
  group: ${{ github.workflow }}
  cancel-in-progress: false

env:
  NODE_VERSION: '20.x'
  CES_VERSION: '2.7.0'

jobs:
  # ===================================================================
  # JOB 1: DEPENDENCY AUDIT & ANALYSIS
  # ===================================================================
  analyze:
    name: 🔍 Dependency Analysis
    runs-on: ubuntu-latest
    timeout-minutes: 15
    outputs:
      has_updates: ${{ steps.check.outputs.has_updates }}
      update_summary: ${{ steps.check.outputs.update_summary }}

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📥 Install dependencies
        run: npm ci --prefer-offline

      - name: 🔍 Check for outdated packages
        id: check
        run: |
          echo "🔍 Checking for outdated packages..."
          
          # Get outdated packages
          npm outdated --json > outdated.json || true
          
          # Check if there are any updates
          if [[ $(cat outdated.json | jq 'length') -gt 0 ]]; then
            echo "has_updates=true" >> $GITHUB_OUTPUT
            
            # Create summary
            SUMMARY=$(cat outdated.json | jq -r 'to_entries[] | "- \(.key): \(.value.current) → \(.value.latest)"' | head -10)
            echo "update_summary<<EOF" >> $GITHUB_OUTPUT
            echo "$SUMMARY" >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
            
            echo "📦 Found $(cat outdated.json | jq 'length') outdated packages"
          else
            echo "has_updates=false" >> $GITHUB_OUTPUT
            echo "✅ All packages are up to date"
          fi

      - name: 🛡️ Security audit
        run: |
          echo "🛡️ Running security audit..."
          npm audit --audit-level=moderate --json > audit.json || true
          
          VULNERABILITIES=$(cat audit.json | jq '.metadata.vulnerabilities.total // 0')
          echo "Found $VULNERABILITIES total vulnerabilities"

      - name: 🤖 Validate Anthropic SDK Dependencies
        run: |
          echo "🤖 Validating Anthropic SDK dependencies..."
          # Check Anthropic SDK version
          npm list @anthropic-ai/sdk --json > anthropic-deps.json || true
          cat anthropic-deps.json
          
          # Security check specifically for Anthropic SDK
          npm audit @anthropic-ai/sdk --json > anthropic-audit.json || true
          cat anthropic-audit.json
          
          echo "✅ Anthropic SDK dependencies validated"

      - name: 📊 Upload analysis results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: dependency-analysis
          path: |
            outdated.json
            audit.json
            anthropic-deps.json
            anthropic-audit.json
          retention-days: 7

  # ===================================================================
  # JOB 2: CREATE UPDATE PR (PATCH UPDATES)
  # ===================================================================
  update-patch:
    name: 🔧 Patch Updates
    runs-on: ubuntu-latest
    needs: [analyze]
    if: needs.analyze.outputs.has_updates == 'true' && (github.event_name == 'schedule' || inputs.update_type == 'patch' || inputs.update_type == 'all')
    timeout-minutes: 20

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📥 Install dependencies
        run: npm ci --prefer-offline

      - name: 🔧 Update patch versions
        run: |
          echo "🔧 Updating patch versions..."
          npx npm-check-updates --upgrade --target patch
          npm install
          
          # Check if there were any changes
          if git diff --quiet package.json package-lock.json; then
            echo "No patch updates available"
            echo "skip_pr=true" >> $GITHUB_ENV
          else
            echo "skip_pr=false" >> $GITHUB_ENV
          fi

      - name: 🧪 Run tests
        if: env.skip_pr == 'false'
        run: |
          npm test -- --watchAll=false --ci
          npm run build

      - name: ✅ Validate CES v2.7.0 Integration
        if: env.skip_pr == 'false'
        run: |
          npm run dev -- validate --verbose
          npm run dev -- config show --section=anthropic
          echo "✅ CES v2.7.0 validation completed"

      - name: 📝 Create Pull Request
        if: env.skip_pr == 'false'
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: |
            🔧 chore: Update patch dependencies
            
            - Automated patch version updates
            - All tests passing
            - Security vulnerabilities addressed
          title: "🔧 Automated Patch Dependency Updates"
          body: |
            ## 📦 Automated Dependency Updates (Patch)
            
            This PR contains automated patch-level dependency updates:
            
            ${{ needs.analyze.outputs.update_summary }}
            
            ### ✅ Validation Completed
            - [x] All tests passing
            - [x] Build successful
            - [x] Security audit clean
            
            ### 🤖 Automated Changes
            - Updated patch versions only (semver compatible)
            - No breaking changes expected
            - Safe to merge after review
            
            **Generated by:** Dependency Management Workflow
            **Type:** Patch updates
          branch: chore/patch-dependency-updates
          delete-branch: true
          labels: |
            dependencies
            patch
            automated

  # ===================================================================
  # JOB 3: CREATE UPDATE PR (MINOR UPDATES)
  # ===================================================================
  update-minor:
    name: 🚀 Minor Updates
    runs-on: ubuntu-latest
    needs: [analyze]
    if: needs.analyze.outputs.has_updates == 'true' && (inputs.update_type == 'minor' || inputs.update_type == 'all')
    timeout-minutes: 20

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📥 Install dependencies
        run: npm ci --prefer-offline

      - name: 🚀 Update minor versions
        run: |
          echo "🚀 Updating minor versions..."
          npx npm-check-updates --upgrade --target minor
          npm install
          
          if git diff --quiet package.json package-lock.json; then
            echo "skip_pr=true" >> $GITHUB_ENV
          else
            echo "skip_pr=false" >> $GITHUB_ENV
          fi

      - name: 🧪 Run comprehensive tests
        if: env.skip_pr == 'false'
        run: |
          npm test -- --watchAll=false --ci
          npm run build
          npm run lint

      - name: 📝 Create Pull Request
        if: env.skip_pr == 'false'
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: |
            🚀 chore: Update minor dependencies
            
            - Automated minor version updates
            - Comprehensive testing completed
            - New features may be available
          title: "🚀 Automated Minor Dependency Updates"
          body: |
            ## 📦 Automated Dependency Updates (Minor)
            
            This PR contains automated minor-level dependency updates:
            
            ${{ needs.analyze.outputs.update_summary }}
            
            ### ✅ Validation Completed
            - [x] All tests passing
            - [x] Build successful
            - [x] Linting passed
            - [x] Security audit clean
            
            ### ⚠️ Review Required
            - Minor updates may include new features
            - Manual testing recommended
            - Review changelog for breaking changes
            
            **Generated by:** Dependency Management Workflow
            **Type:** Minor updates
          branch: chore/minor-dependency-updates
          delete-branch: true
          labels: |
            dependencies
            minor
            automated
            review-required

  # ===================================================================
  # JOB 4: VULNERABILITY FIXES
  # ===================================================================
  fix-vulnerabilities:
    name: 🛡️ Fix Vulnerabilities
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule' || github.event_name == 'workflow_dispatch'
    timeout-minutes: 15

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📥 Install dependencies
        run: npm ci --prefer-offline

      - name: 🛡️ Fix vulnerabilities
        run: |
          echo "🛡️ Attempting to fix vulnerabilities..."
          npm audit fix --force || true
          
          if git diff --quiet package.json package-lock.json; then
            echo "skip_pr=true" >> $GITHUB_ENV
          else
            echo "skip_pr=false" >> $GITHUB_ENV
          fi

      - name: 🧪 Validate fixes
        if: env.skip_pr == 'false'
        run: |
          npm test -- --watchAll=false --ci
          npm run build

      - name: 📝 Create Security Fix PR
        if: env.skip_pr == 'false'
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: |
            🛡️ security: Fix dependency vulnerabilities
            
            - Automated security vulnerability fixes
            - npm audit fix applied
            - All tests validated
          title: "🛡️ Security: Fix Dependency Vulnerabilities"
          body: |
            ## 🛡️ Automated Security Fixes
            
            This PR contains automated security vulnerability fixes.
            
            ### ✅ Validation Completed
            - [x] All tests passing
            - [x] Build successful
            - [x] Security vulnerabilities addressed
            
            ### 🚨 Security Priority
            - **High Priority**: Contains security fixes
            - **Immediate Review**: Recommended for quick merge
            - **Automated Fix**: Applied via npm audit fix
            
            **Generated by:** Dependency Management Workflow
            **Type:** Security fixes
          branch: security/fix-vulnerabilities
          delete-branch: true
          labels: |
            security
            dependencies
            high-priority
            automated

  # ===================================================================
  # JOB 5: DEPENDENCY REPORT
  # ===================================================================
  report:
    name: 📊 Dependency Report
    runs-on: ubuntu-latest
    needs: [analyze, update-patch, update-minor, fix-vulnerabilities]
    if: always()
    timeout-minutes: 10

    steps:
      - name: 📥 Download analysis results
        uses: actions/download-artifact@v4
        with:
          name: dependency-analysis

      - name: 📊 Generate dependency report
        run: |
          echo "## 📦 Dependency Management Report" >> $GITHUB_STEP_SUMMARY
          echo "**Date:** $(date)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Updates available
          if [[ "${{ needs.analyze.outputs.has_updates }}" == "true" ]]; then
            echo "### 📦 Available Updates" >> $GITHUB_STEP_SUMMARY
            echo "${{ needs.analyze.outputs.update_summary }}" >> $GITHUB_STEP_SUMMARY
          else
            echo "### ✅ All Dependencies Up to Date" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🔄 Actions Taken" >> $GITHUB_STEP_SUMMARY
          echo "| Action | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|--------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Patch Updates | ${{ needs.update-patch.result == 'success' && '✅ Applied' || needs.update-patch.result == 'skipped' && '⏭️ Skipped' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Minor Updates | ${{ needs.update-minor.result == 'success' && '✅ Applied' || needs.update-minor.result == 'skipped' && '⏭️ Skipped' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Security Fixes | ${{ needs.fix-vulnerabilities.result == 'success' && '✅ Applied' || needs.fix-vulnerabilities.result == 'skipped' && '⏭️ None needed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY