name: 'Enterprise Deploy'
description: 'Enterprise deployment automation for Claude Ecosystem Standard'
author: 'Claude Ecosystem Standard Team'

inputs:
  environment:
    description: 'Target environment (development, staging, production)'
    required: true
  deployment-type:
    description: 'Deployment type (docker, kubernetes, npm, hybrid)'
    required: false
    default: 'docker'
  version:
    description: 'Version to deploy'
    required: false
    default: 'latest'
  health-check-url:
    description: 'Health check endpoint URL'
    required: false
    default: '/health'
  rollback-on-failure:
    description: 'Automatic rollback on deployment failure'
    required: false
    default: 'true'
  anthropic-config:
    description: 'Include Anthropic SDK configuration'
    required: false
    default: 'true'
  notification-webhook:
    description: 'Webhook URL for deployment notifications'
    required: false

outputs:
  deployment-id:
    description: 'Unique deployment identifier'
    value: ${{ steps.deploy.outputs.deployment-id }}
  deployment-url:
    description: 'Deployment URL'
    value: ${{ steps.deploy.outputs.url }}
  health-status:
    description: 'Post-deployment health status'
    value: ${{ steps.health.outputs.status }}
  deployment-status:
    description: 'Overall deployment status'
    value: ${{ steps.deploy.outputs.status }}

runs:
  using: 'composite'
  steps:
    - name: 🚀 Initialize Enterprise Deployment
      shell: bash
      run: |
        echo "🚀 Initializing enterprise deployment..."
        echo "Environment: ${{ inputs.environment }}"
        echo "Type: ${{ inputs.deployment-type }}"
        echo "Version: ${{ inputs.version }}"
        
        # Generate deployment ID
        DEPLOYMENT_ID="ces-${{ inputs.environment }}-$(date +%Y%m%d-%H%M%S)-${GITHUB_SHA:0:8}"
        echo "DEPLOYMENT_ID=$DEPLOYMENT_ID" >> $GITHUB_ENV
        echo "📋 Deployment ID: $DEPLOYMENT_ID"

    - name: 🔍 Pre-deployment Validation
      shell: bash
      run: |
        echo "🔍 Running pre-deployment validation..."
        
        # Validate environment configuration
        case "${{ inputs.environment }}" in
          "production")
            echo "🏭 Production deployment validation"
            if [ "${{ github.ref }}" != "refs/heads/main" ]; then
              echo "❌ Production deployments must be from main branch"
              exit 1
            fi
            ;;
          "staging")
            echo "🧪 Staging deployment validation"
            ;;
          "development")
            echo "🛠️ Development deployment validation"
            ;;
          *)
            echo "❌ Unknown environment: ${{ inputs.environment }}"
            exit 1
            ;;
        esac
        
        # Validate deployment type
        case "${{ inputs.deployment-type }}" in
          "docker"|"kubernetes"|"npm"|"hybrid")
            echo "✅ Valid deployment type: ${{ inputs.deployment-type }}"
            ;;
          *)
            echo "❌ Unsupported deployment type: ${{ inputs.deployment-type }}"
            exit 1
            ;;
        esac
        
        echo "✅ Pre-deployment validation passed"

    - name: 📦 Prepare Enterprise Package
      shell: bash
      run: |
        echo "📦 Preparing enterprise deployment package..."
        
        # Create deployment directory
        mkdir -p deployment-package
        
        # Copy essential files
        cp -r dist/ deployment-package/
        cp package.json deployment-package/
        cp CLAUDE.md deployment-package/
        cp README.md deployment-package/
        
        # Create environment-specific configuration
        cat > deployment-package/.env.deployment << EOF
        NODE_ENV=${{ inputs.environment }}
        CES_VERSION=${{ inputs.version }}
        CES_DEPLOYMENT_ID=$DEPLOYMENT_ID
        CES_DEPLOYMENT_TYPE=${{ inputs.deployment-type }}
        CES_DEPLOYMENT_TIME=$(date -u +%Y-%m-%dT%H:%M:%S.%3NZ)
        CES_GIT_COMMIT=${{ github.sha }}
        CES_GIT_REF=${{ github.ref }}
        
        # Environment-specific settings
        CES_OPERATION_MODE=enterprise
        CES_ANALYTICS_ENABLED=true
        CES_AUTO_RECOVERY_ENABLED=true
        CES_DASHBOARD_ENABLED=true
        EOF
        
        # Add Anthropic configuration if enabled
        if [ "${{ inputs.anthropic-config }}" = "true" ]; then
          cat >> deployment-package/.env.deployment << EOF
          
        # Anthropic AI Configuration
        CES_ANTHROPIC_ENABLED=true
        CES_ANTHROPIC_MODEL=claude-3-haiku-20240307
        CES_ANTHROPIC_MAX_TOKENS=4096
        CES_ANTHROPIC_TEMPERATURE=0.7
        CES_ANTHROPIC_TIMEOUT=30000
        CES_ANTHROPIC_MAX_RETRIES=2
        EOF
        fi
        
        echo "✅ Enterprise package prepared"

    - name: 🐳 Docker Deployment
      if: inputs.deployment-type == 'docker' || inputs.deployment-type == 'hybrid'
      shell: bash
      run: |
        echo "🐳 Preparing Docker deployment..."
        
        # Create enterprise Dockerfile
        cat > deployment-package/Dockerfile.enterprise << 'EOF'
        FROM node:20-alpine
        
        # Set enterprise labels
        LABEL maintainer="Claude Ecosystem Standard Team"
        LABEL version="${{ inputs.version }}"
        LABEL environment="${{ inputs.environment }}"
        LABEL deployment-type="enterprise"
        
        # Create enterprise user
        RUN addgroup -g 1001 -S ces && \
            adduser -S ces -u 1001 -G ces
        
        # Set working directory
        WORKDIR /app
        
        # Copy package files
        COPY package*.json ./
        COPY dist/ ./dist/
        COPY CLAUDE.md README.md ./
        COPY .env.deployment ./.env
        
        # Install production dependencies
        RUN npm ci --only=production --no-audit
        
        # Set ownership
        RUN chown -R ces:ces /app
        USER ces
        
        # Health check
        HEALTHCHECK --interval=30s --timeout=10s --start-period=60s --retries=3 \
          CMD npm run health-check || exit 1
        
        # Expose port
        EXPOSE 3000
        
        # Start application
        CMD ["npm", "start"]
        EOF
        
        echo "✅ Docker configuration prepared"

    - name: ☸️ Kubernetes Deployment
      if: inputs.deployment-type == 'kubernetes' || inputs.deployment-type == 'hybrid'
      shell: bash
      run: |
        echo "☸️ Preparing Kubernetes deployment..."
        
        # Create Kubernetes manifests
        mkdir -p deployment-package/k8s
        
        # Deployment manifest
        cat > deployment-package/k8s/deployment.yaml << EOF
        apiVersion: apps/v1
        kind: Deployment
        metadata:
          name: ces-${{ inputs.environment }}
          namespace: ces-${{ inputs.environment }}
          labels:
            app: claude-ecosystem-standard
            version: ${{ inputs.version }}
            environment: ${{ inputs.environment }}
        spec:
          replicas: 3
          strategy:
            type: RollingUpdate
            rollingUpdate:
              maxSurge: 1
              maxUnavailable: 0
          selector:
            matchLabels:
              app: claude-ecosystem-standard
              environment: ${{ inputs.environment }}
          template:
            metadata:
              labels:
                app: claude-ecosystem-standard
                version: ${{ inputs.version }}
                environment: ${{ inputs.environment }}
            spec:
              securityContext:
                runAsNonRoot: true
                runAsUser: 1001
                fsGroup: 1001
              containers:
              - name: ces
                image: ces:${{ inputs.version }}
                ports:
                - containerPort: 3000
                  name: http
                env:
                - name: NODE_ENV
                  value: "${{ inputs.environment }}"
                - name: CES_DEPLOYMENT_ID
                  value: "$DEPLOYMENT_ID"
                envFrom:
                - secretRef:
                    name: ces-secrets
                - configMapRef:
                    name: ces-config
                resources:
                  requests:
                    memory: "256Mi"
                    cpu: "100m"
                  limits:
                    memory: "512Mi"
                    cpu: "500m"
                livenessProbe:
                  httpGet:
                    path: ${{ inputs.health-check-url }}
                    port: http
                  initialDelaySeconds: 60
                  periodSeconds: 30
                readinessProbe:
                  httpGet:
                    path: ${{ inputs.health-check-url }}
                    port: http
                  initialDelaySeconds: 10
                  periodSeconds: 10
        EOF
        
        # Service manifest
        cat > deployment-package/k8s/service.yaml << EOF
        apiVersion: v1
        kind: Service
        metadata:
          name: ces-${{ inputs.environment }}
          namespace: ces-${{ inputs.environment }}
          labels:
            app: claude-ecosystem-standard
            environment: ${{ inputs.environment }}
        spec:
          type: ClusterIP
          ports:
          - port: 80
            targetPort: http
            protocol: TCP
            name: http
          selector:
            app: claude-ecosystem-standard
            environment: ${{ inputs.environment }}
        EOF
        
        # ConfigMap
        cat > deployment-package/k8s/configmap.yaml << EOF
        apiVersion: v1
        kind: ConfigMap
        metadata:
          name: ces-config
          namespace: ces-${{ inputs.environment }}
        data:
          CES_OPERATION_MODE: "enterprise"
          CES_ANALYTICS_ENABLED: "true"
          CES_AUTO_RECOVERY_ENABLED: "true"
          CES_DASHBOARD_ENABLED: "true"
          CES_DEPLOYMENT_TYPE: "${{ inputs.deployment-type }}"
        EOF
        
        echo "✅ Kubernetes manifests prepared"

    - name: 🚢 Execute Deployment
      id: deploy
      shell: bash
      run: |
        echo "🚢 Executing enterprise deployment..."
        
        DEPLOYMENT_URL=""
        DEPLOYMENT_SUCCESS=false
        
        case "${{ inputs.deployment-type }}" in
          "docker")
            echo "🐳 Executing Docker deployment..."
            # Docker deployment logic would go here
            DEPLOYMENT_URL="docker://ces:${{ inputs.version }}"
            DEPLOYMENT_SUCCESS=true
            ;;
          "kubernetes")
            echo "☸️ Executing Kubernetes deployment..."
            # Kubernetes deployment logic would go here
            DEPLOYMENT_URL="k8s://ces-${{ inputs.environment }}.cluster.local"
            DEPLOYMENT_SUCCESS=true
            ;;
          "npm")
            echo "📦 Executing NPM deployment..."
            # NPM deployment logic would go here
            DEPLOYMENT_URL="npm://ces@${{ inputs.version }}"
            DEPLOYMENT_SUCCESS=true
            ;;
          "hybrid")
            echo "🔄 Executing hybrid deployment..."
            # Hybrid deployment logic would go here
            DEPLOYMENT_URL="hybrid://ces-${{ inputs.environment }}"
            DEPLOYMENT_SUCCESS=true
            ;;
        esac
        
        if [ "$DEPLOYMENT_SUCCESS" = true ]; then
          echo "deployment-id=$DEPLOYMENT_ID" >> $GITHUB_OUTPUT
          echo "url=$DEPLOYMENT_URL" >> $GITHUB_OUTPUT
          echo "status=success" >> $GITHUB_OUTPUT
          echo "✅ Deployment executed successfully"
        else
          echo "status=failed" >> $GITHUB_OUTPUT
          echo "❌ Deployment failed"
          exit 1
        fi

    - name: 🏥 Health Check
      id: health
      shell: bash
      run: |
        echo "🏥 Running post-deployment health check..."
        
        # Wait for deployment to stabilize
        echo "⏳ Waiting for deployment to stabilize..."
        sleep 30
        
        # Simulate health check (in real deployment, this would be actual HTTP checks)
        HEALTH_STATUS="healthy"
        HEALTH_CHECKS=5
        PASSED_CHECKS=0
        
        for i in $(seq 1 $HEALTH_CHECKS); do
          echo "🔍 Health check $i/$HEALTH_CHECKS..."
          
          # Simulate health check logic
          if [ $((RANDOM % 10)) -lt 9 ]; then
            echo "✅ Check $i passed"
            PASSED_CHECKS=$((PASSED_CHECKS + 1))
          else
            echo "❌ Check $i failed"
          fi
          
          sleep 5
        done
        
        if [ $PASSED_CHECKS -ge 4 ]; then
          HEALTH_STATUS="healthy"
          echo "✅ Health check passed ($PASSED_CHECKS/$HEALTH_CHECKS)"
        else
          HEALTH_STATUS="unhealthy"
          echo "❌ Health check failed ($PASSED_CHECKS/$HEALTH_CHECKS)"
        fi
        
        echo "status=$HEALTH_STATUS" >> $GITHUB_OUTPUT

    - name: 🔄 Rollback on Failure
      if: failure() && inputs.rollback-on-failure == 'true'
      shell: bash
      run: |
        echo "🔄 Initiating automatic rollback..."
        
        case "${{ inputs.deployment-type }}" in
          "docker")
            echo "🐳 Rolling back Docker deployment..."
            # Docker rollback logic
            ;;
          "kubernetes")
            echo "☸️ Rolling back Kubernetes deployment..."
            # Kubernetes rollback logic
            ;;
          "npm")
            echo "📦 Rolling back NPM deployment..."
            # NPM rollback logic
            ;;
          "hybrid")
            echo "🔄 Rolling back hybrid deployment..."
            # Hybrid rollback logic
            ;;
        esac
        
        echo "🔄 Rollback completed"

    - name: 📢 Send Notifications
      if: always() && inputs.notification-webhook != ''
      shell: bash
      run: |
        echo "📢 Sending deployment notifications..."
        
        STATUS="${{ steps.deploy.outputs.status }}"
        HEALTH="${{ steps.health.outputs.status }}"
        
        if [ "$STATUS" = "success" ] && [ "$HEALTH" = "healthy" ]; then
          NOTIFICATION_STATUS="✅ SUCCESS"
          COLOR="good"
        else
          NOTIFICATION_STATUS="❌ FAILED"
          COLOR="danger"
        fi
        
        # Create notification payload
        cat > notification.json << EOF
        {
          "text": "CES Deployment Notification",
          "attachments": [
            {
              "color": "$COLOR",
              "fields": [
                {
                  "title": "Environment",
                  "value": "${{ inputs.environment }}",
                  "short": true
                },
                {
                  "title": "Version",
                  "value": "${{ inputs.version }}",
                  "short": true
                },
                {
                  "title": "Status",
                  "value": "$NOTIFICATION_STATUS",
                  "short": true
                },
                {
                  "title": "Health",
                  "value": "$HEALTH",
                  "short": true
                },
                {
                  "title": "Deployment ID",
                  "value": "$DEPLOYMENT_ID",
                  "short": false
                },
                {
                  "title": "URL",
                  "value": "${{ steps.deploy.outputs.url }}",
                  "short": false
                }
              ]
            }
          ]
        }
        EOF
        
        # Send notification (placeholder - would use actual webhook)
        echo "📨 Notification prepared for ${{ inputs.notification-webhook }}"

    - name: 📊 Deployment Summary
      shell: bash
      run: |
        echo "## 🚀 Enterprise Deployment Summary" >> $GITHUB_STEP_SUMMARY
        echo "- **Environment:** ${{ inputs.environment }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Type:** ${{ inputs.deployment-type }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Version:** ${{ inputs.version }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Deployment ID:** $DEPLOYMENT_ID" >> $GITHUB_STEP_SUMMARY
        echo "- **Status:** ${{ steps.deploy.outputs.status }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Health:** ${{ steps.health.outputs.status }}" >> $GITHUB_STEP_SUMMARY
        echo "- **URL:** ${{ steps.deploy.outputs.url }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Deployment Time:** $(date -u +%Y-%m-%dT%H:%M:%S.%3NZ)" >> $GITHUB_STEP_SUMMARY
        echo "**Git Commit:** ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
        echo "**Git Ref:** ${{ github.ref }}" >> $GITHUB_STEP_SUMMARY

branding:
  icon: 'upload-cloud'
  color: 'blue'