name: 'CES Validate'
description: 'Validate Claude Ecosystem Standard configuration and setup'
author: 'Claude Ecosystem Standard Team'

inputs:
  validation-level:
    description: 'Validation level (basic, full, enterprise)'
    required: false
    default: 'full'
  anthropic-check:
    description: 'Include Anthropic SDK validation'
    required: false
    default: 'true'
  config-file:
    description: 'Custom configuration file path'
    required: false
    default: '.env'
  fail-on-warnings:
    description: 'Fail validation on warnings'
    required: false
    default: 'false'

outputs:
  validation-status:
    description: 'Overall validation status'
    value: ${{ steps.validate.outputs.status }}
  issues-found:
    description: 'Number of issues found'
    value: ${{ steps.validate.outputs.issues }}
  anthropic-status:
    description: 'Anthropic SDK validation status'
    value: ${{ steps.anthropic.outputs.status }}
  config-status:
    description: 'Configuration validation status'
    value: ${{ steps.config.outputs.status }}

runs:
  using: 'composite'
  steps:
    - name: 🔍 Setup Validation Environment
      shell: bash
      run: |
        echo "🔍 Setting up CES validation environment..."
        echo "Validation Level: ${{ inputs.validation-level }}"
        echo "Anthropic Check: ${{ inputs.anthropic-check }}"
        echo "Config File: ${{ inputs.config-file }}"

    - name: 📋 Basic Project Structure Validation
      id: structure
      shell: bash
      run: |
        echo "📋 Validating CES project structure..."
        
        ISSUES=0
        
        # Required files
        REQUIRED_FILES=(
          "package.json"
          "tsconfig.json"
          "CLAUDE.md"
          "src/index.ts"
          "src/config/ConfigManager.ts"
          "src/cli/CLIManager.ts"
        )
        
        for file in "${REQUIRED_FILES[@]}"; do
          if [ ! -f "$file" ]; then
            echo "❌ Missing required file: $file"
            ISSUES=$((ISSUES + 1))
          else
            echo "✅ Found: $file"
          fi
        done
        
        # Required directories
        REQUIRED_DIRS=(
          "src/cli"
          "src/config"
          "src/session"
          "src/utils"
          "src/types"
          ".github"
          ".claude"
        )
        
        for dir in "${REQUIRED_DIRS[@]}"; do
          if [ ! -d "$dir" ]; then
            echo "❌ Missing required directory: $dir"
            ISSUES=$((ISSUES + 1))
          else
            echo "✅ Found: $dir"
          fi
        done
        
        echo "structure-issues=$ISSUES" >> $GITHUB_OUTPUT
        
        if [ $ISSUES -eq 0 ]; then
          echo "✅ Project structure validation passed"
        else
          echo "⚠️ Project structure validation found $ISSUES issues"
        fi

    - name: ⚙️ Configuration Validation
      id: config
      shell: bash
      run: |
        echo "⚙️ Validating CES configuration..."
        
        CONFIG_ISSUES=0
        
        # Check if config file exists
        if [ ! -f "${{ inputs.config-file }}" ]; then
          echo "⚠️ Configuration file not found: ${{ inputs.config-file }}"
          echo "Creating minimal configuration for validation..."
          
          cat > "${{ inputs.config-file }}" << EOF
          NODE_ENV=development
          CES_VERSION=2.7.0
          CES_PROJECT_NAME=claude-ecosystem-standard
          EOF
        fi
        
        # Load and validate configuration
        if [ -f "${{ inputs.config-file }}" ]; then
          echo "📋 Found configuration file: ${{ inputs.config-file }}"
          
          # Check required environment variables
          REQUIRED_VARS=(
            "NODE_ENV"
            "CES_VERSION"
            "CES_PROJECT_NAME"
          )
          
          for var in "${REQUIRED_VARS[@]}"; do
            if grep -q "^$var=" "${{ inputs.config-file }}"; then
              VALUE=$(grep "^$var=" "${{ inputs.config-file }}" | cut -d'=' -f2-)
              echo "✅ $var=$VALUE"
            else
              echo "⚠️ Missing configuration: $var"
              CONFIG_ISSUES=$((CONFIG_ISSUES + 1))
            fi
          done
          
          # Check version consistency
          if [ -f "package.json" ]; then
            PACKAGE_VERSION=$(node -p "require('./package.json').version" 2>/dev/null || echo "unknown")
            CONFIG_VERSION=$(grep "^CES_VERSION=" "${{ inputs.config-file }}" | cut -d'=' -f2 | tr -d '"' || echo "unknown")
            
            if [ "$PACKAGE_VERSION" != "unknown" ] && [ "$CONFIG_VERSION" != "unknown" ]; then
              if [ "v$PACKAGE_VERSION" = "$CONFIG_VERSION" ] || [ "$PACKAGE_VERSION" = "$CONFIG_VERSION" ]; then
                echo "✅ Version consistency: $PACKAGE_VERSION"
              else
                echo "⚠️ Version mismatch: package.json($PACKAGE_VERSION) vs config($CONFIG_VERSION)"
                CONFIG_ISSUES=$((CONFIG_ISSUES + 1))
              fi
            fi
          fi
        fi
        
        echo "config-issues=$CONFIG_ISSUES" >> $GITHUB_OUTPUT
        
        if [ $CONFIG_ISSUES -eq 0 ]; then
          echo "status=passed" >> $GITHUB_OUTPUT
          echo "✅ Configuration validation passed"
        else
          echo "status=failed" >> $GITHUB_OUTPUT
          echo "⚠️ Configuration validation found $CONFIG_ISSUES issues"
        fi

    - name: 🤖 Anthropic SDK Validation
      id: anthropic
      if: inputs.anthropic-check == 'true'
      shell: bash
      run: |
        echo "🤖 Validating Anthropic SDK integration..."
        
        ANTHROPIC_ISSUES=0
        
        # Check if Anthropic SDK is installed
        if [ -f "package.json" ]; then
          if grep -q "@anthropic-ai/sdk" package.json; then
            echo "✅ Anthropic SDK dependency found"
            
            # Check SDK version
            SDK_VERSION=$(node -p "require('./package.json').dependencies['@anthropic-ai/sdk']" 2>/dev/null || echo "unknown")
            echo "📦 Anthropic SDK version: $SDK_VERSION"
          else
            echo "⚠️ Anthropic SDK not found in dependencies"
            ANTHROPIC_ISSUES=$((ANTHROPIC_ISSUES + 1))
          fi
        fi
        
        # Check for Anthropic integration files
        ANTHROPIC_FILES=(
          "src/integrations/anthropic/AnthropicSDKManager.ts"
          "src/cli/AnthropicCLI.ts"
        )
        
        for file in "${ANTHROPIC_FILES[@]}"; do
          if [ -f "$file" ]; then
            echo "✅ Found Anthropic file: $file"
          else
            echo "⚠️ Missing Anthropic file: $file"
            ANTHROPIC_ISSUES=$((ANTHROPIC_ISSUES + 1))
          fi
        done
        
        # Check API key configuration (without exposing it)
        if grep -q "ANTHROPIC_API_KEY" "${{ inputs.config-file }}" 2>/dev/null; then
          echo "✅ Anthropic API key configuration found"
        else
          echo "⚠️ Anthropic API key not configured"
          ANTHROPIC_ISSUES=$((ANTHROPIC_ISSUES + 1))
        fi
        
        echo "anthropic-issues=$ANTHROPIC_ISSUES" >> $GITHUB_OUTPUT
        
        if [ $ANTHROPIC_ISSUES -eq 0 ]; then
          echo "status=passed" >> $GITHUB_OUTPUT
          echo "✅ Anthropic SDK validation passed"
        else
          echo "status=failed" >> $GITHUB_OUTPUT
          echo "⚠️ Anthropic SDK validation found $ANTHROPIC_ISSUES issues"
        fi

    - name: 🔧 TypeScript Validation
      id: typescript
      shell: bash
      run: |
        echo "🔧 Validating TypeScript configuration..."
        
        TS_ISSUES=0
        
        # Check TypeScript configuration
        if [ -f "tsconfig.json" ]; then
          echo "✅ Found tsconfig.json"
          
          # Validate TypeScript config syntax
          if node -e "JSON.parse(require('fs').readFileSync('tsconfig.json'))" 2>/dev/null; then
            echo "✅ TypeScript configuration is valid JSON"
          else
            echo "❌ TypeScript configuration has invalid JSON"
            TS_ISSUES=$((TS_ISSUES + 1))
          fi
          
          # Check for strict mode
          if grep -q '"strict": true' tsconfig.json; then
            echo "✅ TypeScript strict mode enabled"
          else
            echo "⚠️ TypeScript strict mode not enabled"
            TS_ISSUES=$((TS_ISSUES + 1))
          fi
        else
          echo "❌ Missing tsconfig.json"
          TS_ISSUES=$((TS_ISSUES + 1))
        fi
        
        echo "typescript-issues=$TS_ISSUES" >> $GITHUB_OUTPUT
        
        if [ $TS_ISSUES -eq 0 ]; then
          echo "✅ TypeScript validation passed"
        else
          echo "⚠️ TypeScript validation found $TS_ISSUES issues"
        fi

    - name: 📦 Dependencies Validation
      id: dependencies
      shell: bash
      run: |
        echo "📦 Validating project dependencies..."
        
        DEP_ISSUES=0
        
        # Check package.json
        if [ -f "package.json" ]; then
          echo "✅ Found package.json"
          
          # Check for package-lock.json
          if [ -f "package-lock.json" ]; then
            echo "✅ Found package-lock.json"
          else
            echo "⚠️ Missing package-lock.json"
            DEP_ISSUES=$((DEP_ISSUES + 1))
          fi
          
          # Check essential scripts
          REQUIRED_SCRIPTS=("build" "test" "lint" "dev")
          for script in "${REQUIRED_SCRIPTS[@]}"; do
            if node -p "require('./package.json').scripts['$script']" >/dev/null 2>&1; then
              echo "✅ Found script: $script"
            else
              echo "⚠️ Missing script: $script"
              DEP_ISSUES=$((DEP_ISSUES + 1))
            fi
          done
          
          # Check for security vulnerabilities (if npm is available)
          if command -v npm >/dev/null 2>&1; then
            echo "🔍 Checking for security vulnerabilities..."
            if npm audit --audit-level=high >/dev/null 2>&1; then
              echo "✅ No high-severity vulnerabilities found"
            else
              echo "⚠️ Security vulnerabilities detected"
              DEP_ISSUES=$((DEP_ISSUES + 1))
            fi
          fi
        else
          echo "❌ Missing package.json"
          DEP_ISSUES=$((DEP_ISSUES + 1))
        fi
        
        echo "dependencies-issues=$DEP_ISSUES" >> $GITHUB_OUTPUT
        
        if [ $DEP_ISSUES -eq 0 ]; then
          echo "✅ Dependencies validation passed"
        else
          echo "⚠️ Dependencies validation found $DEP_ISSUES issues"
        fi

    - name: 📊 Generate Validation Summary
      id: validate
      shell: bash
      run: |
        STRUCTURE_ISSUES="${{ steps.structure.outputs.structure-issues || '0' }}"
        CONFIG_ISSUES="${{ steps.config.outputs.config-issues || '0' }}"
        ANTHROPIC_ISSUES="${{ steps.anthropic.outputs.anthropic-issues || '0' }}"
        TS_ISSUES="${{ steps.typescript.outputs.typescript-issues || '0' }}"
        DEP_ISSUES="${{ steps.dependencies.outputs.dependencies-issues || '0' }}"
        
        TOTAL_ISSUES=$((STRUCTURE_ISSUES + CONFIG_ISSUES + ANTHROPIC_ISSUES + TS_ISSUES + DEP_ISSUES))
        
        echo "issues=$TOTAL_ISSUES" >> $GITHUB_OUTPUT
        
        # Determine overall status
        if [ $TOTAL_ISSUES -eq 0 ]; then
          echo "status=passed" >> $GITHUB_OUTPUT
          echo "✅ All CES validations passed!"
        elif [ "${{ inputs.fail-on-warnings }}" = "true" ]; then
          echo "status=failed" >> $GITHUB_OUTPUT
          echo "❌ CES validation failed with $TOTAL_ISSUES issues"
        else
          echo "status=passed-with-warnings" >> $GITHUB_OUTPUT
          echo "⚠️ CES validation passed with $TOTAL_ISSUES warnings"
        fi
        
        # Generate summary
        echo "## 🔍 CES Validation Summary" >> $GITHUB_STEP_SUMMARY
        echo "- **Overall Status:** $([ $TOTAL_ISSUES -eq 0 ] && echo "✅ PASSED" || echo "⚠️ WARNINGS")" >> $GITHUB_STEP_SUMMARY
        echo "- **Total Issues:** $TOTAL_ISSUES" >> $GITHUB_STEP_SUMMARY
        echo "- **Structure Issues:** $STRUCTURE_ISSUES" >> $GITHUB_STEP_SUMMARY
        echo "- **Configuration Issues:** $CONFIG_ISSUES" >> $GITHUB_STEP_SUMMARY
        echo "- **Anthropic Issues:** $ANTHROPIC_ISSUES" >> $GITHUB_STEP_SUMMARY
        echo "- **TypeScript Issues:** $TS_ISSUES" >> $GITHUB_STEP_SUMMARY
        echo "- **Dependencies Issues:** $DEP_ISSUES" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Validation Level:** ${{ inputs.validation-level }}" >> $GITHUB_STEP_SUMMARY
        echo "**Anthropic Check:** ${{ inputs.anthropic-check }}" >> $GITHUB_STEP_SUMMARY

branding:
  icon: 'check-circle'
  color: 'green'