name: 'Anthropic Security Check'
description: 'Security validation for Anthropic SDK integration in CES'
author: 'Claude Ecosystem Standard Team'

inputs:
  check-type:
    description: 'Security check type (keys, patterns, usage, all)'
    required: false
    default: 'all'
  severity:
    description: 'Minimum severity to report (low, medium, high, critical)'
    required: false
    default: 'medium'
  scan-directory:
    description: 'Directory to scan for security issues'
    required: false
    default: 'src'
  fail-on-secrets:
    description: 'Fail if hardcoded secrets are found'
    required: false
    default: 'true'

outputs:
  hardcoded-keys:
    description: 'Number of hardcoded API keys found'
    value: ${{ steps.keys.outputs.count }}
  security-issues:
    description: 'Total security issues found'
    value: ${{ steps.summary.outputs.total }}
  critical-issues:
    description: 'Critical security issues found'
    value: ${{ steps.summary.outputs.critical }}
  scan-status:
    description: 'Overall security scan status'
    value: ${{ steps.summary.outputs.status }}

runs:
  using: 'composite'
  steps:
    - name: üîê Setup Security Scanner
      shell: bash
      run: |
        echo "üîê Setting up Anthropic security scanner..."
        echo "Check Type: ${{ inputs.check-type }}"
        echo "Severity: ${{ inputs.severity }}"
        echo "Scan Directory: ${{ inputs.scan-directory }}"
        
        # Create security patterns file
        mkdir -p .security-temp
        cat > .security-temp/anthropic-patterns.txt << 'EOF'
        # Anthropic API Key patterns
        sk-ant-[a-zA-Z0-9_-]{95,}
        ANTHROPIC_API_KEY\s*[:=]\s*["']sk-ant-[^"']+["']
        apiKey\s*[:=]\s*["']sk-ant-[^"']+["']
        
        # Generic secret patterns in Anthropic context
        (anthropic|claude).*['\"][a-zA-Z0-9_-]{20,}['\"]
        (api_key|apiKey|secret|token).*anthropic.*['\"][^'\"]{10,}['\"]
        
        # Configuration exposure patterns
        ANTHROPIC.*['\"][^'\"]{15,}['\"]
        anthropic.*password.*['\"][^'\"]{8,}['\"]
        EOF

    - name: üîç Scan for Hardcoded API Keys
      id: keys
      if: inputs.check-type == 'keys' || inputs.check-type == 'all'
      shell: bash
      run: |
        echo "üîç Scanning for hardcoded Anthropic API keys..."
        
        KEY_COUNT=0
        CRITICAL_KEYS=0
        
        # Scan for Anthropic API keys
        echo "Scanning for sk-ant- patterns..."
        KEY_MATCHES=$(grep -r "sk-ant-" "${{ inputs.scan-directory }}" --include="*.ts" --include="*.js" --include="*.json" 2>/dev/null || true)
        
        if [ -n "$KEY_MATCHES" ]; then
          echo "üö® CRITICAL: Hardcoded Anthropic API keys found!"
          echo "$KEY_MATCHES"
          KEY_COUNT=$(echo "$KEY_MATCHES" | wc -l)
          CRITICAL_KEYS=$KEY_COUNT
        else
          echo "‚úÖ No hardcoded API keys found"
        fi
        
        # Scan for API key assignment patterns
        echo "Scanning for API key assignment patterns..."
        ASSIGNMENT_MATCHES=$(grep -r -E "ANTHROPIC_API_KEY\s*[:=]\s*['\"][^'\"]+['\"]" "${{ inputs.scan-directory }}" --include="*.ts" --include="*.js" 2>/dev/null || true)
        
        if [ -n "$ASSIGNMENT_MATCHES" ]; then
          echo "üö® CRITICAL: Direct API key assignments found!"
          echo "$ASSIGNMENT_MATCHES"
          ASSIGNMENT_COUNT=$(echo "$ASSIGNMENT_MATCHES" | wc -l)
          KEY_COUNT=$((KEY_COUNT + ASSIGNMENT_COUNT))
          CRITICAL_KEYS=$((CRITICAL_KEYS + ASSIGNMENT_COUNT))
        fi
        
        # Check for API keys in comments
        echo "Scanning for API keys in comments..."
        COMMENT_MATCHES=$(grep -r -E "//.*sk-ant-|/\*.*sk-ant-|\*.*sk-ant-" "${{ inputs.scan-directory }}" --include="*.ts" --include="*.js" 2>/dev/null || true)
        
        if [ -n "$COMMENT_MATCHES" ]; then
          echo "‚ö†Ô∏è API keys found in comments!"
          echo "$COMMENT_MATCHES"
          COMMENT_COUNT=$(echo "$COMMENT_MATCHES" | wc -l)
          KEY_COUNT=$((KEY_COUNT + COMMENT_COUNT))
        fi
        
        echo "count=$KEY_COUNT" >> $GITHUB_OUTPUT
        echo "critical=$CRITICAL_KEYS" >> $GITHUB_OUTPUT
        echo "üîç Found $KEY_COUNT total key issues, $CRITICAL_KEYS critical"

    - name: üõ°Ô∏è Scan for Insecure Usage Patterns
      id: patterns
      if: inputs.check-type == 'patterns' || inputs.check-type == 'all'
      shell: bash
      run: |
        echo "üõ°Ô∏è Scanning for insecure Anthropic usage patterns..."
        
        PATTERN_ISSUES=0
        HIGH_SEVERITY=0
        
        # Pattern 1: Unvalidated user input
        echo "Checking for unvalidated user input to Anthropic API..."
        UNVALIDATED=$(grep -r -E "(anthropic|claude).*\.(ask|generate|chat).*req\.|request\." "${{ inputs.scan-directory }}" --include="*.ts" --include="*.js" | grep -v "validate\|sanitize\|escape" || true)
        
        if [ -n "$UNVALIDATED" ]; then
          echo "‚ö†Ô∏è HIGH: Potential unvalidated user input to Anthropic API"
          echo "$UNVALIDATED"
          UNVALIDATED_COUNT=$(echo "$UNVALIDATED" | wc -l)
          PATTERN_ISSUES=$((PATTERN_ISSUES + UNVALIDATED_COUNT))
          HIGH_SEVERITY=$((HIGH_SEVERITY + UNVALIDATED_COUNT))
        fi
        
        # Pattern 2: API responses in logs
        echo "Checking for API responses in logs..."
        LOG_RESPONSES=$(grep -r -E "(console\.log|logger\.|log\.).*anthropic.*response" "${{ inputs.scan-directory }}" --include="*.ts" --include="*.js" || true)
        
        if [ -n "$LOG_RESPONSES" ]; then
          echo "‚ö†Ô∏è MEDIUM: Anthropic API responses potentially logged"
          echo "$LOG_RESPONSES"
          LOG_COUNT=$(echo "$LOG_RESPONSES" | wc -l)
          PATTERN_ISSUES=$((PATTERN_ISSUES + LOG_COUNT))
        fi
        
        # Pattern 3: Insecure error handling
        echo "Checking for insecure error handling..."
        INSECURE_ERRORS=$(grep -r -E "catch.*anthropic.*console\.log|catch.*error.*anthropic" "${{ inputs.scan-directory }}" --include="*.ts" --include="*.js" || true)
        
        if [ -n "$INSECURE_ERRORS" ]; then
          echo "‚ö†Ô∏è MEDIUM: Insecure Anthropic error handling"
          echo "$INSECURE_ERRORS"
          ERROR_COUNT=$(echo "$INSECURE_ERRORS" | wc -l)
          PATTERN_ISSUES=$((PATTERN_ISSUES + ERROR_COUNT))
        fi
        
        # Pattern 4: Missing rate limiting
        echo "Checking for missing rate limiting..."
        RATE_LIMIT_FILES=$(find "${{ inputs.scan-directory }}" -name "*.ts" -o -name "*.js" | xargs grep -l "anthropic\|claude" || true)
        MISSING_RATE_LIMIT=0
        
        for file in $RATE_LIMIT_FILES; do
          if grep -q "anthropic\|claude" "$file"; then
            if ! grep -q "rate.*limit\|throttle\|delay\|wait" "$file"; then
              echo "‚ö†Ô∏è LOW: Missing rate limiting in $file"
              MISSING_RATE_LIMIT=$((MISSING_RATE_LIMIT + 1))
            fi
          fi
        done
        
        PATTERN_ISSUES=$((PATTERN_ISSUES + MISSING_RATE_LIMIT))
        
        # Pattern 5: API key validation
        echo "Checking for API key validation..."
        VALIDATION_FILES=$(find "${{ inputs.scan-directory }}" -name "*.ts" -o -name "*.js" | xargs grep -l "ANTHROPIC_API_KEY" || true)
        MISSING_VALIDATION=0
        
        for file in $VALIDATION_FILES; do
          if grep -q "ANTHROPIC_API_KEY" "$file"; then
            if ! grep -q "validate.*key\|key.*valid\|check.*key" "$file"; then
              echo "‚ö†Ô∏è MEDIUM: Missing API key validation in $file"
              MISSING_VALIDATION=$((MISSING_VALIDATION + 1))
            fi
          fi
        done
        
        PATTERN_ISSUES=$((PATTERN_ISSUES + MISSING_VALIDATION))
        
        echo "pattern-issues=$PATTERN_ISSUES" >> $GITHUB_OUTPUT
        echo "high-severity=$HIGH_SEVERITY" >> $GITHUB_OUTPUT
        echo "üõ°Ô∏è Found $PATTERN_ISSUES pattern issues, $HIGH_SEVERITY high severity"

    - name: üìä Analyze Usage Security
      id: usage
      if: inputs.check-type == 'usage' || inputs.check-type == 'all'
      shell: bash
      run: |
        echo "üìä Analyzing Anthropic usage security..."
        
        USAGE_ISSUES=0
        
        # Check for secure configuration loading
        echo "Checking configuration security..."
        CONFIG_FILES=$(find "${{ inputs.scan-directory }}" -name "*.ts" -o -name "*.js" | xargs grep -l "anthropic.*config\|config.*anthropic" || true)
        
        for file in $CONFIG_FILES; do
          # Check for environment variable usage
          if grep -q "process\.env\.ANTHROPIC_API_KEY" "$file"; then
            if ! grep -q "validation\|check\|verify" "$file"; then
              echo "‚ö†Ô∏è Environment variable usage without validation in $file"
              USAGE_ISSUES=$((USAGE_ISSUES + 1))
            fi
          fi
          
          # Check for config file loading
          if grep -q "require.*config\|import.*config" "$file"; then
            if ! grep -q "encrypt\|secure\|protect" "$file"; then
              echo "‚ö†Ô∏è Config loading without security measures in $file"
              USAGE_ISSUES=$((USAGE_ISSUES + 1))
            fi
          fi
        done
        
        # Check for secure storage patterns
        echo "Checking storage security..."
        STORAGE_FILES=$(find "${{ inputs.scan-directory }}" -name "*.ts" -o -name "*.js" | xargs grep -l "store\|save\|persist" || true)
        
        for file in $STORAGE_FILES; do
          if grep -q "anthropic\|api.*key" "$file"; then
            if grep -q "localStorage\|sessionStorage\|file.*write" "$file"; then
              echo "‚ö†Ô∏è Potential insecure storage in $file"
              USAGE_ISSUES=$((USAGE_ISSUES + 1))
            fi
          fi
        done
        
        # Check for secure transmission
        echo "Checking transmission security..."
        NETWORK_FILES=$(find "${{ inputs.scan-directory }}" -name "*.ts" -o -name "*.js" | xargs grep -l "http\|fetch\|request" || true)
        
        for file in $NETWORK_FILES; do
          if grep -q "anthropic" "$file"; then
            if grep -q "http:" "$file" && ! grep -q "https:" "$file"; then
              echo "‚ö†Ô∏è Insecure HTTP usage in $file"
              USAGE_ISSUES=$((USAGE_ISSUES + 1))
            fi
          fi
        done
        
        echo "usage-issues=$USAGE_ISSUES" >> $GITHUB_OUTPUT
        echo "üìä Found $USAGE_ISSUES usage security issues"

    - name: üìã Generate Security Report
      id: summary
      shell: bash
      run: |
        KEY_COUNT="${{ steps.keys.outputs.count || '0' }}"
        KEY_CRITICAL="${{ steps.keys.outputs.critical || '0' }}"
        PATTERN_ISSUES="${{ steps.patterns.outputs.pattern-issues || '0' }}"
        PATTERN_HIGH="${{ steps.patterns.outputs.high-severity || '0' }}"
        USAGE_ISSUES="${{ steps.usage.outputs.usage-issues || '0' }}"
        
        TOTAL_ISSUES=$((KEY_COUNT + PATTERN_ISSUES + USAGE_ISSUES))
        CRITICAL_TOTAL=$((KEY_CRITICAL + PATTERN_HIGH))
        
        echo "total=$TOTAL_ISSUES" >> $GITHUB_OUTPUT
        echo "critical=$CRITICAL_TOTAL" >> $GITHUB_OUTPUT
        
        # Determine status
        if [ $KEY_CRITICAL -gt 0 ] && [ "${{ inputs.fail-on-secrets }}" = "true" ]; then
          echo "status=failed" >> $GITHUB_OUTPUT
          STATUS="‚ùå FAILED"
        elif [ $CRITICAL_TOTAL -gt 0 ] && [ "${{ inputs.severity }}" = "high" ]; then
          echo "status=failed" >> $GITHUB_OUTPUT
          STATUS="‚ùå FAILED"
        elif [ $TOTAL_ISSUES -gt 0 ]; then
          echo "status=warning" >> $GITHUB_OUTPUT
          STATUS="‚ö†Ô∏è WARNING"
        else
          echo "status=passed" >> $GITHUB_OUTPUT
          STATUS="‚úÖ PASSED"
        fi
        
        # Generate detailed report
        echo "## üîê Anthropic Security Report" >> $GITHUB_STEP_SUMMARY
        echo "**Overall Status:** $STATUS" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Summary" >> $GITHUB_STEP_SUMMARY
        echo "- **Total Issues:** $TOTAL_ISSUES" >> $GITHUB_STEP_SUMMARY
        echo "- **Critical Issues:** $CRITICAL_TOTAL" >> $GITHUB_STEP_SUMMARY
        echo "- **Hardcoded Keys:** $KEY_COUNT" >> $GITHUB_STEP_SUMMARY
        echo "- **Pattern Issues:** $PATTERN_ISSUES" >> $GITHUB_STEP_SUMMARY
        echo "- **Usage Issues:** $USAGE_ISSUES" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Recommendations" >> $GITHUB_STEP_SUMMARY
        
        if [ $KEY_CRITICAL -gt 0 ]; then
          echo "üö® **IMMEDIATE ACTION REQUIRED:** Remove hardcoded API keys from source code" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [ $PATTERN_HIGH -gt 0 ]; then
          echo "‚ö†Ô∏è **HIGH PRIORITY:** Address insecure usage patterns" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [ $TOTAL_ISSUES -gt 0 ]; then
          echo "üìã **GENERAL:** Review and address all identified security issues" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Scan Configuration:**" >> $GITHUB_STEP_SUMMARY
        echo "- Check Type: ${{ inputs.check-type }}" >> $GITHUB_STEP_SUMMARY
        echo "- Severity: ${{ inputs.severity }}" >> $GITHUB_STEP_SUMMARY
        echo "- Directory: ${{ inputs.scan-directory }}" >> $GITHUB_STEP_SUMMARY

    - name: üßπ Cleanup
      shell: bash
      if: always()
      run: |
        echo "üßπ Cleaning up security scanner..."
        rm -rf .security-temp
        echo "‚úÖ Cleanup completed"

branding:
  icon: 'shield'
  color: 'red'