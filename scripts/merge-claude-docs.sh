#!/bin/bash
# merge-claude-docs.sh - Merge CES e Project CLAUDE.md
# Genera CLAUDE-MASTER.md unificato per Claude Code CLI
# Version: 1.0.0

set -e

# Configurazione colori output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

# Configurazione globale
VERBOSE=false
DRY_RUN=false
BACKUP_ENABLED=true
FORCE_OVERWRITE=false

# Logging
log_info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

log_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

log_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

log_verbose() {
    if [ "$VERBOSE" = true ]; then
        echo -e "${CYAN}[VERBOSE]${NC} $1"
    fi
}

# Funzione per mostrare help
show_help() {
    cat << EOF
╔═══════════════════════════════════════════════════════════╗
║              CLAUDE DOCUMENTATION MERGER                 ║
║               Dual Claude Implementation                  ║
╚═══════════════════════════════════════════════════════════╝

Usage: $0 [OPTIONS]

OPTIONS:
  --merge, -m          Execute merge operation (default)
  --dry-run, -d        Show what would be done without executing
  --verbose, -v        Enable verbose output
  --help, -h           Show this help message
  --force, -f          Force overwrite existing CLAUDE-MASTER.md
  --no-backup          Disable backup creation

DESCRIPTION:
  Merges CES system CLAUDE.md with project-specific CLAUDE.md into 
  a unified CLAUDE-MASTER.md file that Claude Code CLI will read.

PATHS:
  • CES CLAUDE.md: ~/.claude/CLAUDE.md (global instructions)
  • Project CLAUDE.md: ./CLAUDE.md (project-specific instructions)  
  • Output: ./.claude/CLAUDE-MASTER.md (merged result)

EXAMPLES:
  $0 --merge --verbose           # Merge with detailed output
  $0 --dry-run                   # Preview merge without executing
  $0 --force --no-backup         # Force merge without backup

EXIT CODES:
  0    Success
  1    General error
  2    Missing required files
  3    Permission error
  4    Validation failed

For more information, see: https://github.com/anthropics/claude-ecosystem-standard
EOF
}

# Funzione per il backup
create_backup() {
    local target_file="$1"
    
    if [ ! -f "$target_file" ]; then
        log_verbose "No existing file to backup: $target_file"
        return 0
    fi
    
    if [ "$BACKUP_ENABLED" = false ]; then
        log_verbose "Backup disabled, skipping backup of $target_file"
        return 0
    fi
    
    local backup_name="${target_file}.backup.$(date +%Y%m%d_%H%M%S)"
    
    if [ "$DRY_RUN" = true ]; then
        log_info "DRY RUN: Would create backup: $backup_name"
        return 0
    fi
    
    cp "$target_file" "$backup_name"
    log_verbose "Backup created: $backup_name"
}

# Funzione per generare CLAUDE-MASTER.md
generate_master_claude() {
    local ces_claude_path="$1"
    local project_claude_path="$2"
    local output_path="$3"
    
    log_verbose "Generating CLAUDE-MASTER.md..."
    log_verbose "  CES Source: $ces_claude_path"
    log_verbose "  Project Source: $project_claude_path"
    log_verbose "  Output: $output_path"
    
    if [ "$DRY_RUN" = true ]; then
        log_info "DRY RUN: Would generate $output_path"
        log_info "DRY RUN: CES Source exists: $([ -f "$ces_claude_path" ] && echo "YES" || echo "NO")"
        log_info "DRY RUN: Project Source exists: $([ -f "$project_claude_path" ] && echo "YES" || echo "NO")"
        return 0
    fi
    
    # Assicura che la directory di output esista
    mkdir -p "$(dirname "$output_path")"
    
    # Crea backup se necessario
    create_backup "$output_path"
    
    # Genera il documento master
    cat > "$output_path" << EOF
# CLAUDE-MASTER.md
# Auto-generated unified Claude configuration
# Generated: $(date -u +"%Y-%m-%d %H:%M:%S UTC")
# Source: Dual Claude Implementation v1.0.0
# 
# This file is automatically generated by merging:
# • CES System Instructions: $ces_claude_path
# • Project Instructions: $project_claude_path
#
# DO NOT EDIT MANUALLY - Changes will be overwritten
# To modify: Edit source files and regenerate using merge-claude-docs.sh

EOF

    # Aggiungi contenuto CES se esiste
    if [ -f "$ces_claude_path" ]; then
        log_verbose "Including CES CLAUDE.md content"
        cat >> "$output_path" << EOF

## 🌐 GLOBAL SYSTEM INSTRUCTIONS (CES)
# Source: $ces_claude_path
# Last Modified: $(stat -c %y "$ces_claude_path" 2>/dev/null || echo "Unknown")

EOF
        cat "$ces_claude_path" >> "$output_path"
        cat >> "$output_path" << EOF


---

EOF
    else
        log_warning "CES CLAUDE.md not found at: $ces_claude_path"
        cat >> "$output_path" << EOF

## 🌐 GLOBAL SYSTEM INSTRUCTIONS (CES)
# Source: $ces_claude_path
# STATUS: NOT FOUND

⚠️ **Global CES instructions not available**
This usually means:
1. CES is not installed in the user's home directory
2. The path ~/.claude/CLAUDE.md does not exist
3. Different Claude Code CLI configuration

This is not necessarily an error - project-specific instructions below are sufficient.

---

EOF
    fi
    
    # Aggiungi contenuto Project se esiste
    if [ -f "$project_claude_path" ]; then
        log_verbose "Including Project CLAUDE.md content"
        cat >> "$output_path" << EOF

## 📁 PROJECT-SPECIFIC INSTRUCTIONS
# Source: $project_claude_path
# Last Modified: $(stat -c %y "$project_claude_path" 2>/dev/null || echo "Unknown")
# Project: $(basename "$(pwd)")

EOF
        cat "$project_claude_path" >> "$output_path"
    else
        log_warning "Project CLAUDE.md not found at: $project_claude_path"
        cat >> "$output_path" << EOF

## 📁 PROJECT-SPECIFIC INSTRUCTIONS  
# Source: $project_claude_path
# STATUS: NOT FOUND

⚠️ **Project-specific instructions not available**
Consider creating a CLAUDE.md file in your project root with:
- Project-specific coding standards
- Architecture guidelines
- Development workflows
- Task management instructions

EOF
    fi
    
    # Aggiungi metadata footer
    cat >> "$output_path" << EOF

---

## 📋 MERGE METADATA

**Generation Info:**
- Generated: $(date -u +"%Y-%m-%d %H:%M:%S UTC")
- Merger Version: 1.0.0
- Project Directory: $(pwd)
- Working Directory: $(basename "$(pwd)")

**Sources Status:**
- CES Global: $([ -f "$ces_claude_path" ] && echo "✅ Found ($(wc -l < "$ces_claude_path") lines)" || echo "❌ Missing")
- Project Local: $([ -f "$project_claude_path" ] && echo "✅ Found ($(wc -l < "$project_claude_path") lines)" || echo "❌ Missing")

**Configuration:**
- Backup Enabled: $BACKUP_ENABLED
- Verbose Mode: $VERBOSE
- Force Overwrite: $FORCE_OVERWRITE

**Next Steps:**
1. Review the merged documentation above
2. Use Claude Code CLI: \`**start session\`
3. Update sources and regenerate: \`npm run dev -- docs regenerate\`

---
*This file is managed by the Dual Claude System - DO NOT EDIT MANUALLY*
EOF

    log_success "CLAUDE-MASTER.md generated successfully"
    log_info "Output file: $output_path"
    log_info "File size: $(wc -c < "$output_path") bytes"
    log_info "Line count: $(wc -l < "$output_path") lines"
}

# Funzione per validare il merge
validate_merge() {
    local output_path="$1"
    
    log_verbose "Validating merged document..."
    
    if [ ! -f "$output_path" ]; then
        log_error "Validation failed: Output file not found: $output_path"
        return 1
    fi
    
    local file_size=$(wc -c < "$output_path")
    if [ "$file_size" -lt 100 ]; then
        log_error "Validation failed: Output file too small ($file_size bytes)"
        return 1
    fi
    
    if ! grep -q "CLAUDE-MASTER.md" "$output_path"; then
        log_error "Validation failed: Missing header in output file"
        return 1
    fi
    
    if ! grep -q "Generated:" "$output_path"; then
        log_error "Validation failed: Missing generation timestamp"
        return 1
    fi
    
    log_success "Validation passed: $output_path is valid"
    return 0
}

# Main function
main() {
    # Parse arguments
    while [[ $# -gt 0 ]]; do
        case $1 in
            --merge|-m)
                # Default operation, no action needed
                shift
                ;;
            --dry-run|-d)
                DRY_RUN=true
                log_info "DRY RUN MODE: No files will be modified"
                shift
                ;;
            --verbose|-v)
                VERBOSE=true
                shift
                ;;
            --help|-h)
                show_help
                exit 0
                ;;
            --force|-f)
                FORCE_OVERWRITE=true
                shift
                ;;
            --no-backup)
                BACKUP_ENABLED=false
                shift
                ;;
            *)
                log_error "Unknown option: $1"
                log_info "Use --help for usage information"
                exit 1
                ;;
        esac
    done
    
    # Banner per operazioni non-help
    if [ "$VERBOSE" = true ]; then
        echo -e "${CYAN}"
        echo "╔═══════════════════════════════════════════════════════════╗"
        echo "║              CLAUDE DOCUMENTATION MERGER                 ║"
        echo "║               Dual Claude Implementation                  ║"
        echo "╚═══════════════════════════════════════════════════════════╝"
        echo -e "${NC}"
    fi
    
    # Rileva percorsi
    local ces_claude_path="$HOME/.claude/CLAUDE.md"
    local project_claude_path="$(pwd)/CLAUDE.md"
    local output_path="$(pwd)/.claude/CLAUDE-MASTER.md"
    
    log_verbose "Configuration:"
    log_verbose "  CES CLAUDE.md: $ces_claude_path"
    log_verbose "  Project CLAUDE.md: $project_claude_path"
    log_verbose "  Output CLAUDE-MASTER.md: $output_path"
    log_verbose "  Backup enabled: $BACKUP_ENABLED"
    log_verbose "  Force overwrite: $FORCE_OVERWRITE"
    
    # Verifica se output esiste e force non è abilitato
    if [ -f "$output_path" ] && [ "$FORCE_OVERWRITE" = false ] && [ "$DRY_RUN" = false ]; then
        log_warning "Output file already exists: $output_path"
        log_info "Use --force to overwrite or --dry-run to preview"
        read -p "Overwrite existing file? [y/N] " -n 1 -r
        echo ""
        if [[ ! $REPLY =~ ^[Yy]$ ]]; then
            log_info "Operation cancelled by user"
            exit 0
        fi
    fi
    
    # Verifica prerequisiti minimi
    if [ ! -f "$ces_claude_path" ] && [ ! -f "$project_claude_path" ]; then
        log_error "Neither CES nor Project CLAUDE.md found"
        log_error "At least one source file is required:"
        log_error "  CES: $ces_claude_path"
        log_error "  Project: $project_claude_path"
        exit 2
    fi
    
    # Esegui merge
    generate_master_claude "$ces_claude_path" "$project_claude_path" "$output_path"
    
    # Valida risultato (solo se non dry-run)
    if [ "$DRY_RUN" = false ]; then
        if ! validate_merge "$output_path"; then
            log_error "Merge validation failed"
            exit 4
        fi
    fi
    
    # Risultato finale
    if [ "$DRY_RUN" = true ]; then
        log_success "DRY RUN completed successfully"
        log_info "Run without --dry-run to execute the merge"
    else
        log_success "Dual Claude merge completed successfully!"
        log_info "Claude Code CLI will now use: $output_path"
        log_info "To regenerate: $(basename "$0") --merge"
    fi
}

# Esegui main con tutti gli argomenti
main "$@"