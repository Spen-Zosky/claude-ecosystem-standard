./.dist/utils/ClaudeMergeSystem.d.ts:export interface MergeSystemConfig {
./.dist/utils/ClaudeMergeSystem.d.ts:export interface MergeOperation {
./.dist/utils/ClaudeMergeSystem.d.ts:export interface MergeSource {
./.dist/utils/ClaudeMergeSystem.d.ts:export interface ConflictInfo {
./.dist/utils/ClaudeMergeSystem.d.ts:export interface SystemMetrics {
./.dist/utils/ClaudeMergeSystem.d.ts:export interface PluginInterface {
./.dist/utils/PathResolver.d.ts:export interface PathDetectionInfo {
./.dist/utils/PathResolver.d.ts:export interface CESPaths {
./.dist/utils/ClaudeDocManager.d.ts:export interface ClaudeDocMetadata {
./.dist/utils/ClaudeDocManager.d.ts:export interface ClaudeDocSearchResult {
./.dist/utils/ClaudeDocManager.d.ts:export interface ClaudeDocWatchEvent {
./.dist/utils/ClaudeDocManager.d.ts:export interface ClaudeDocBackupInfo {
./.dist/utils/ClaudeDocManager.d.ts:export interface ClaudeDocValidation {
./.dist/types/index.d.ts:export interface SessionConfig {
./.dist/types/index.d.ts:export type SessionStatus = 'active' | 'suspended' | 'closed' | 'error';
./.dist/types/index.d.ts:export interface MCPServerConfig {
./.dist/types/index.d.ts:export interface AgentConfig {
./.dist/types/index.d.ts:export interface EnvironmentConfig {
./.dist/types/index.d.ts:export interface DetectedLanguage {
./.dist/types/index.d.ts:export interface SessionCheckpoint {
./.dist/types/index.d.ts:export interface SystemState {
./.dist/types/index.d.ts:export interface ProcessInfo {
./.dist/types/index.d.ts:export interface GitStatus {
./.dist/types/index.d.ts:export interface CLICommand {
./.dist/types/index.d.ts:export interface CLIOption {
./.dist/types/index.d.ts:export interface ProjectHealth {
./.dist/types/index.d.ts:export interface HealthCheck {
./.dist/types/index.d.ts:export interface HealthIssue {
./.dist/types/index.d.ts:export interface StartupHookResult {
./.dist/types/index.d.ts:export type DeepPartial<T> = {
./.dist/types/index.d.ts:export type RequiredFields<T, K extends keyof T> = T & Required<Pick<T, K>>;
./.dist/types/index.d.ts:export type OptionalFields<T, K extends keyof T> = Omit<T, K> & Partial<Pick<T, K>>;
./.dist/types/index.d.ts:export interface SessionProfile {
./.dist/types/index.d.ts:export interface SessionContext {
./.dist/types/index.d.ts:export interface ServiceHealth {
./.dist/types/index.d.ts:export interface LogContext {
./.dist/types/index.d.ts:export interface LogMetrics {
./.dist/types/index.d.ts:export interface ProcessService {
./.dist/types/index.d.ts:export interface QuickCommand {
./.dist/cli/DashboardManager.d.ts:export interface DashboardMetrics {
./.dist/cli/DashboardManager.d.ts:export interface SystemMetrics {
./.dist/cli/DashboardManager.d.ts:export interface SessionMetrics {
./.dist/cli/DashboardManager.d.ts:export interface MCPServerMetrics {
./.dist/cli/DashboardManager.d.ts:export interface ProcessMetrics {
./.dist/cli/DashboardManager.d.ts:export interface PerformanceMetrics {
./.dist/cli/DashboardManager.d.ts:export interface MemoryUsage {
./.dist/cli/DashboardManager.d.ts:export interface DiskUsage {
./.dist/cli/DashboardManager.d.ts:export interface NetworkActivity {
./.dist/cli/DashboardManager.d.ts:export interface Alert {
./.dist/cli/DashboardManager.d.ts:export interface DashboardOptions {
./.dist/cli/SystemCleanupManager.d.ts:export interface CleanupReport {
./.dist/cli/SystemCleanupManager.d.ts:export interface CleanupAction {
./.dist/cli/SystemCleanupManager.d.ts:export interface ProcessInfo {
./.dist/cli/SystemCleanupManager.d.ts:export interface CleanupOptions {
./.dist/cli/AISessionManager.d.ts:export interface AISessionConfig {
./.dist/cli/AISessionManager.d.ts:export interface SessionContext {
./.dist/cli/AISessionManager.d.ts:export interface AIRecommendation {
./.dist/cli/AISessionManager.d.ts:export interface SmartSuggestion {
./.dist/cli/AISessionManager.d.ts:export interface SessionOptimization {
./.dist/cli/AutoTaskManager.d.ts:export interface TaskAnalysis {
./.dist/cli/AutoTaskManager.d.ts:export interface AgentConfig {
./.dist/cli/AutoTaskManager.d.ts:export interface ExecutionStrategy {
./.dist/cli/AutoTaskManager.d.ts:export interface ExecutionPhase {
./.dist/cli/AutoTaskManager.d.ts:export interface CoordinationStrategy {
./.dist/cli/AutoTaskManager.d.ts:export type TaskType = 'feature-development' | 'system-design' | 'performance-optimization' | 'database-design' | 'api-development' | 'ui-development' | 'testing-qa' | 'documentation' | 'research-analysis' | 'compliance-audit' | 'deployment-devops' | 'bug-investigation';
./.dist/cli/AutoTaskManager.d.ts:export type TaskDomain = 'architecture' | 'backend' | 'frontend' | 'database' | 'devops' | 'testing' | 'design' | 'documentation' | 'compliance' | 'research';
./.dist/cli/SessionMonitor.d.ts:export interface MonitorOptions {
./.dist/cli/AnalyticsManager.d.ts:export interface AnalyticsEvent {
./.dist/cli/AnalyticsManager.d.ts:export interface UsageMetrics {
./.dist/cli/AnalyticsManager.d.ts:export interface PerformanceMetrics {
./.dist/cli/AnalyticsManager.d.ts:export interface TrendAnalysis {
./.dist/cli/AnalyticsManager.d.ts:export interface AnalyticsReport {
./.dist/cli/AnalyticsManager.d.ts:export interface AnalyticsConfig {
./.dist/cli/AutoRecoveryManager.d.ts:export interface RecoveryConfig {
./.dist/cli/AutoRecoveryManager.d.ts:export interface ServiceHealth {
./.dist/cli/AutoRecoveryManager.d.ts:export interface RecoveryAction {
./.dist/cli/AutoRecoveryManager.d.ts:export interface SystemHealth {
./.dist/cli/CloudIntegrationManager.d.ts:export interface CloudConfig {
./.dist/cli/CloudIntegrationManager.d.ts:export interface SessionBackup {
./.dist/cli/CloudIntegrationManager.d.ts:export interface SyncStatus {
./.dist/cli/CloudIntegrationManager.d.ts:export interface SyncConflict {
./.dist/cli/CloudIntegrationManager.d.ts:export interface SyncError {
./.dist/cli/CloudIntegrationManager.d.ts:export interface CloudProviderAdapter {
./.dist/cli/QuickCommandManager.d.ts:export interface QuickCommand {
./.dist/cli/QuickCommandManager.d.ts:export interface QuickCommandStats {
./.dist/cli/SessionProfileManager.d.ts:export interface SessionProfile {
./.dist/cli/SessionProfileManager.d.ts:export interface ProfileStats {
./.dist/integrations/anthropic/types/anthropic.types.d.ts:export interface AnthropicConfig {
./.dist/integrations/anthropic/types/anthropic.types.d.ts:export interface ConversationMessage {
./.dist/integrations/anthropic/types/anthropic.types.d.ts:export interface CompletionOptions {
./.dist/integrations/anthropic/types/anthropic.types.d.ts:export interface StreamChunk {
./.dist/integrations/anthropic/types/anthropic.types.d.ts:export interface UsageStats {
./.dist/integrations/anthropic/types/anthropic.types.d.ts:export interface CompletionResponse {
./.dist/integrations/anthropic/types/anthropic.types.d.ts:export interface CodeAnalysisRequest {
./.dist/integrations/anthropic/types/anthropic.types.d.ts:export interface CodeGenerationRequest {
./.dist/config/EnvironmentConfig.d.ts:export interface IntegrationConfig {
./.dist/config/EnvironmentConfig.d.ts:export interface CESEnvironmentConfig {
./.src/utils/ClaudeDocManager.ts:export interface ClaudeDocMetadata {
./.src/utils/ClaudeDocManager.ts:export interface ClaudeDocSearchResult {
./.src/utils/ClaudeDocManager.ts:export interface ClaudeDocWatchEvent {
./.src/utils/ClaudeDocManager.ts:export interface ClaudeDocBackupInfo {
./.src/utils/ClaudeDocManager.ts:export interface ClaudeDocValidation {
./.src/utils/PathResolver.ts:export interface PathDetectionInfo {
./.src/utils/PathResolver.ts:export interface CESPaths {
./.src/utils/ClaudeMergeSystem.ts:export interface MergeSystemConfig {
./.src/utils/ClaudeMergeSystem.ts:export interface MergeOperation {
./.src/utils/ClaudeMergeSystem.ts:export interface MergeSource {
./.src/utils/ClaudeMergeSystem.ts:export interface ConflictInfo {
./.src/utils/ClaudeMergeSystem.ts:export interface SystemMetrics {
./.src/utils/ClaudeMergeSystem.ts:export interface PluginInterface {
./.src/types/index.ts:export interface SessionConfig {
./.src/types/index.ts:export type SessionStatus = 'active' | 'suspended' | 'closed' | 'error';
./.src/types/index.ts:export interface MCPServerConfig {
./.src/types/index.ts:export interface AgentConfig {
./.src/types/index.ts:export interface EnvironmentConfig {
./.src/types/index.ts:export interface DetectedLanguage {
./.src/types/index.ts:export interface SessionCheckpoint {
./.src/types/index.ts:export interface SystemState {
./.src/types/index.ts:export interface ProcessInfo {
./.src/types/index.ts:export interface GitStatus {
./.src/types/index.ts:export interface CLICommand {
./.src/types/index.ts:export interface CLIOption {
./.src/types/index.ts:export interface ProjectHealth {
./.src/types/index.ts:export interface HealthCheck {
./.src/types/index.ts:export interface HealthIssue {
./.src/types/index.ts:export interface StartupHookResult {
./.src/types/index.ts:export type DeepPartial<T> = {
./.src/types/index.ts:export type RequiredFields<T, K extends keyof T> = T & Required<Pick<T, K>>;
./.src/types/index.ts:export type OptionalFields<T, K extends keyof T> = Omit<T, K> & Partial<Pick<T, K>>;
./.src/types/index.ts:export interface SessionProfile {
./.src/types/index.ts:export interface SessionContext {
./.src/types/index.ts:export interface ServiceHealth {
./.src/types/index.ts:export interface LogContext {
./.src/types/index.ts:export interface LogMetrics {
./.src/types/index.ts:export interface ProcessService {
./.src/types/index.ts:export interface QuickCommand {
./.src/cli/AutoRecoveryManager.ts:export interface RecoveryConfig {
./.src/cli/AutoRecoveryManager.ts:export interface ServiceHealth {
./.src/cli/AutoRecoveryManager.ts:export interface RecoveryAction {
./.src/cli/AutoRecoveryManager.ts:export interface SystemHealth {
./.src/cli/SessionProfileManager.ts:export interface SessionProfile {
./.src/cli/SessionProfileManager.ts:export interface ProfileStats {
./.src/cli/AutoTaskManager.ts:export interface TaskAnalysis {
./.src/cli/AutoTaskManager.ts:export interface AgentConfig {
./.src/cli/AutoTaskManager.ts:export interface ExecutionStrategy {
./.src/cli/AutoTaskManager.ts:export interface ExecutionPhase {
./.src/cli/AutoTaskManager.ts:export interface CoordinationStrategy {
./.src/cli/AutoTaskManager.ts:export type TaskType = 
./.src/cli/AutoTaskManager.ts:export type TaskDomain = 
./.src/cli/AutoTaskManager.ts:interface TaskPattern {
./.src/cli/QuickCommandManager.ts:export interface QuickCommand {
./.src/cli/QuickCommandManager.ts:export interface QuickCommandStats {
./.src/cli/SessionMonitor.ts:export interface MonitorOptions {
./.src/cli/SystemCleanupManager.ts:export interface CleanupReport {
./.src/cli/SystemCleanupManager.ts:export interface CleanupAction {
./.src/cli/SystemCleanupManager.ts:export interface ProcessInfo {
./.src/cli/SystemCleanupManager.ts:export interface CleanupOptions {
./.src/cli/DashboardManager.ts:export interface DashboardMetrics {
./.src/cli/DashboardManager.ts:export interface SystemMetrics {
./.src/cli/DashboardManager.ts:export interface SessionMetrics {
./.src/cli/DashboardManager.ts:export interface MCPServerMetrics {
./.src/cli/DashboardManager.ts:export interface ProcessMetrics {
./.src/cli/DashboardManager.ts:export interface PerformanceMetrics {
./.src/cli/DashboardManager.ts:export interface MemoryUsage {
./.src/cli/DashboardManager.ts:export interface DiskUsage {
./.src/cli/DashboardManager.ts:export interface NetworkActivity {
./.src/cli/DashboardManager.ts:export interface Alert {
./.src/cli/DashboardManager.ts:export interface DashboardOptions {
./.src/cli/AnalyticsManager.ts:export interface AnalyticsEvent {
./.src/cli/AnalyticsManager.ts:export interface UsageMetrics {
./.src/cli/AnalyticsManager.ts:export interface PerformanceMetrics {
./.src/cli/AnalyticsManager.ts:export interface TrendAnalysis {
./.src/cli/AnalyticsManager.ts:export interface AnalyticsReport {
./.src/cli/AnalyticsManager.ts:export interface AnalyticsConfig {
./.src/cli/AISessionManager.ts:export interface AISessionConfig {
./.src/cli/AISessionManager.ts:export interface SessionContext {
./.src/cli/AISessionManager.ts:export interface AIRecommendation {
./.src/cli/AISessionManager.ts:export interface SmartSuggestion {
./.src/cli/AISessionManager.ts:export interface SessionOptimization {
./.src/cli/DocumentationCommands.ts:interface DocumentationValidation {
./.src/cli/DocumentationCommands.ts:interface DocumentationDebugInfo {
./.src/cli/CloudIntegrationManager.ts:export interface CloudConfig {
./.src/cli/CloudIntegrationManager.ts:export interface SessionBackup {
./.src/cli/CloudIntegrationManager.ts:export interface SyncStatus {
./.src/cli/CloudIntegrationManager.ts:export interface SyncConflict {
./.src/cli/CloudIntegrationManager.ts:export interface SyncError {
./.src/cli/CloudIntegrationManager.ts:export interface CloudProviderAdapter {
./.src/integrations/anthropic/types/anthropic.types.ts:export interface AnthropicConfig {
./.src/integrations/anthropic/types/anthropic.types.ts:export interface ConversationMessage {
./.src/integrations/anthropic/types/anthropic.types.ts:export interface CompletionOptions {
./.src/integrations/anthropic/types/anthropic.types.ts:export interface StreamChunk {
./.src/integrations/anthropic/types/anthropic.types.ts:export interface UsageStats {
./.src/integrations/anthropic/types/anthropic.types.ts:export interface CompletionResponse {
./.src/integrations/anthropic/types/anthropic.types.ts:export interface CodeAnalysisRequest {
./.src/integrations/anthropic/types/anthropic.types.ts:export interface CodeGenerationRequest {
./.src/config/EnvironmentConfig.ts:export interface IntegrationConfig {
./.src/config/EnvironmentConfig.ts:export interface CESEnvironmentConfig {
